
Hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c24  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e78  08009e78  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e80  08009e80  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e80  08009e80  00019e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e84  08009e84  00019e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b80  20000184  0800a00c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  0800a00c  00021d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfe0  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac8  00000000  00000000  0003c194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00041128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a681  00000000  00000000  00042468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac99  00000000  00000000  0006cae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e335  00000000  00000000  00087782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195ab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  00195b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009de4 	.word	0x08009de4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009de4 	.word	0x08009de4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b42      	ldr	r3, [pc, #264]	; (800063c <MX_GPIO_Init+0x120>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a41      	ldr	r2, [pc, #260]	; (800063c <MX_GPIO_Init+0x120>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b3f      	ldr	r3, [pc, #252]	; (800063c <MX_GPIO_Init+0x120>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b3c      	ldr	r3, [pc, #240]	; (800063c <MX_GPIO_Init+0x120>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	4a3b      	ldr	r2, [pc, #236]	; (800063c <MX_GPIO_Init+0x120>)
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000556:	4b39      	ldr	r3, [pc, #228]	; (800063c <MX_GPIO_Init+0x120>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	f003 0320 	and.w	r3, r3, #32
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <MX_GPIO_Init+0x120>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a35      	ldr	r2, [pc, #212]	; (800063c <MX_GPIO_Init+0x120>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <MX_GPIO_Init+0x120>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <MX_GPIO_Init+0x120>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a2f      	ldr	r2, [pc, #188]	; (800063c <MX_GPIO_Init+0x120>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <MX_GPIO_Init+0x120>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_MOSI_Pin|NRF_CLK_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000598:	4829      	ldr	r0, [pc, #164]	; (8000640 <MX_GPIO_Init+0x124>)
 800059a:	f000 fe3f 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NRF_SS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2103      	movs	r1, #3
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <MX_GPIO_Init+0x128>)
 80005a4:	f000 fe3a 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_MISO_Pin;
 80005a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <MX_GPIO_Init+0x124>)
 80005be:	f000 fcab 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = NRF_MOSI_Pin|NRF_CLK_Pin;
 80005c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <MX_GPIO_Init+0x124>)
 80005dc:	f000 fc9c 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = NRF_SS_Pin|NRF_CE_Pin;
 80005e0:	2303      	movs	r3, #3
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <MX_GPIO_Init+0x128>)
 80005f8:	f000 fc8e 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUT4_Pin|BUT3_Pin|BUT2_Pin|NRF_IRQ_Pin;
 80005fc:	f643 0320 	movw	r3, #14368	; 0x3820
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000606:	2301      	movs	r3, #1
 8000608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_GPIO_Init+0x12c>)
 8000612:	f000 fc81 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT0_Pin;
 8000616:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f000 fc73 	bl	8000f18 <HAL_GPIO_Init>

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800
 8000644:	48001400 	.word	0x48001400
 8000648:	48000400 	.word	0x48000400

0800064c <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	619a      	str	r2, [r3, #24]
  HRTIM_SimplePWMChannelCfgTypeDef pSimplePWMChannelCfg = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 800067e:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000680:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <MX_HRTIM1_Init+0x16c>)
 8000682:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000684:	4b4b      	ldr	r3, [pc, #300]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800068a:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000690:	4848      	ldr	r0, [pc, #288]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000692:	f000 fddb 	bl	800124c <HAL_HRTIM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_HRTIM1_Init+0x54>
  {
    Error_Handler();
 800069c:	f000 f97d 	bl	800099a <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4844      	ldr	r0, [pc, #272]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 80006a4:	f000 fea2 	bl	80013ec <HAL_HRTIM_DLLCalibrationStart>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 80006ae:	f000 f974 	bl	800099a <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80006b2:	210a      	movs	r1, #10
 80006b4:	483f      	ldr	r0, [pc, #252]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 80006b6:	f000 fef1 	bl	800149c <HAL_HRTIM_PollForDLLCalibration>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_HRTIM1_Init+0x78>
  {
    Error_Handler();
 80006c0:	f000 f96b 	bl	800099a <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFF7;
 80006c4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 80006ce:	2302      	movs	r3, #2
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80006d2:	2308      	movs	r3, #8
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	461a      	mov	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	4835      	ldr	r0, [pc, #212]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 80006e0:	f000 ff10 	bl	8001504 <HAL_HRTIM_TimeBaseConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_HRTIM1_Init+0xa2>
  {
    Error_Handler();
 80006ea:	f000 f956 	bl	800099a <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	461a      	mov	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	482d      	ldr	r0, [pc, #180]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000700:	f001 f826 	bl	8001750 <HAL_HRTIM_WaveformTimerControl>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_HRTIM1_Init+0xc2>
  {
    Error_Handler();
 800070a:	f000 f946 	bl	800099a <Error_Handler>
  }
  pSimplePWMChannelCfg.Pulse = 0x7FF7;
 800070e:	f647 73f7 	movw	r3, #32759	; 0x7ff7
 8000712:	603b      	str	r3, [r7, #0]
  pSimplePWMChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  pSimplePWMChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pSimplePWMChannelCfg) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2201      	movs	r2, #1
 8000720:	2100      	movs	r1, #0
 8000722:	4824      	ldr	r0, [pc, #144]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000724:	f000 ff16 	bl	8001554 <HAL_HRTIM_SimplePWMChannelConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_HRTIM1_Init+0xe6>
  {
    Error_Handler();
 800072e:	f000 f934 	bl	800099a <Error_Handler>
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pSimplePWMChannelCfg) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	2202      	movs	r2, #2
 8000736:	2100      	movs	r1, #0
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 800073a:	f000 ff0b 	bl	8001554 <HAL_HRTIM_SimplePWMChannelConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_HRTIM1_Init+0xfc>
  {
    Error_Handler();
 8000744:	f000 f929 	bl	800099a <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074c:	461a      	mov	r2, r3
 800074e:	2103      	movs	r1, #3
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000752:	f000 fed7 	bl	8001504 <HAL_HRTIM_TimeBaseConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_HRTIM1_Init+0x114>
  {
    Error_Handler();
 800075c:	f000 f91d 	bl	800099a <Error_Handler>
  }

  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	461a      	mov	r2, r3
 8000766:	2103      	movs	r1, #3
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 800076a:	f000 fff1 	bl	8001750 <HAL_HRTIM_WaveformTimerControl>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_HRTIM1_Init+0x12c>
  {
    Error_Handler();
 8000774:	f000 f911 	bl	800099a <Error_Handler>
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pSimplePWMChannelCfg) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	2240      	movs	r2, #64	; 0x40
 800077c:	2103      	movs	r1, #3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000780:	f000 fee8 	bl	8001554 <HAL_HRTIM_SimplePWMChannelConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_HRTIM1_Init+0x142>
  {
    Error_Handler();
 800078a:	f000 f906 	bl	800099a <Error_Handler>
  }
  if (HAL_HRTIM_SimplePWMChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pSimplePWMChannelCfg) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	2103      	movs	r1, #3
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 8000796:	f000 fedd 	bl	8001554 <HAL_HRTIM_SimplePWMChannelConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_HRTIM1_Init+0x158>
  {
    Error_Handler();
 80007a0:	f000 f8fb 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_HRTIM1_Init+0x168>)
 80007a6:	f000 f829 	bl	80007fc <HAL_HRTIM_MspPostInit>

}
 80007aa:	bf00      	nop
 80007ac:	3738      	adds	r7, #56	; 0x38
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200001a0 	.word	0x200001a0
 80007b8:	40016800 	.word	0x40016800

080007bc <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_HRTIM_MspInit+0x38>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10b      	bne.n	80007e6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_HRTIM_MspInit+0x3c>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <HAL_HRTIM_MspInit+0x3c>)
 80007d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <HAL_HRTIM_MspInit+0x3c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40016800 	.word	0x40016800
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <HAL_HRTIM_MspPostInit+0xa0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d13a      	bne.n	8000894 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_HRTIM_MspPostInit+0xa4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_HRTIM_MspPostInit+0xa4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_HRTIM_MspPostInit+0xa4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> HRTIM1_CHD1
    PB15     ------> HRTIM1_CHD2
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800084e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000860:	230d      	movs	r3, #13
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	480e      	ldr	r0, [pc, #56]	; (80008a4 <HAL_HRTIM_MspPostInit+0xa8>)
 800086c:	f000 fb54 	bl	8000f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000870:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8000882:	230d      	movs	r3, #13
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f000 fb42 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40016800 	.word	0x40016800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 f9b3 	bl	8000c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f826 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff fe32 	bl	800051c <MX_GPIO_Init>
  MX_HRTIM1_Init();
 80008b8:	f7ff fec8 	bl	800064c <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 80008bc:	f000 f8dc 	bl	8000a78 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 80008c0:	f008 fd80 	bl	80093c4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */



  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1);  // Enable the generation of the waveform signal on the designated output
 80008c4:	2101      	movs	r1, #1
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <main+0x54>)
 80008c8:	f000 ff75 	bl	80017b6 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA2);  // Enable the generation of the waveform signal on the designated output
 80008cc:	2102      	movs	r1, #2
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <main+0x54>)
 80008d0:	f000 ff71 	bl	80017b6 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD1);  // Enable the generation of the waveform signal on the designated output
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <main+0x54>)
 80008d8:	f000 ff6d 	bl	80017b6 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TD2);  // Enable the generation of the waveform signal on the designated output
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <main+0x54>)
 80008e0:	f000 ff69 	bl	80017b6 <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);  // Start the counter of the Timer A operating in waveform mode
 80008e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <main+0x54>)
 80008ea:	f000 ff91 	bl	8001810 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_D);  // Start the counter of the Timer A operating in waveform mode
 80008ee:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80008f2:	4802      	ldr	r0, [pc, #8]	; (80008fc <main+0x54>)
 80008f4:	f000 ff8c 	bl	8001810 <HAL_HRTIM_WaveformCountStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x50>
 80008fa:	bf00      	nop
 80008fc:	200001a0 	.word	0x200001a0

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0318 	add.w	r3, r7, #24
 800090a:	2238      	movs	r2, #56	; 0x38
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f009 fa60 	bl	8009dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000922:	2000      	movs	r0, #0
 8000924:	f002 ff20 	bl	8003768 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000928:	2322      	movs	r3, #34	; 0x22
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000942:	2304      	movs	r3, #4
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000946:	2355      	movs	r3, #85	; 0x55
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800094e:	2306      	movs	r3, #6
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	4618      	mov	r0, r3
 800095c:	f002 ffb8 	bl	80038d0 <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000966:	f000 f818 	bl	800099a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2303      	movs	r3, #3
 8000970:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fab6 	bl	8003ef4 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800098e:	f000 f804 	bl	800099a <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099e:	b672      	cpsid	i
}
 80009a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	; 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	; 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009da:	f002 ff69 	bl	80038b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f940 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <USB_LP_IRQHandler+0x10>)
 8000a46:	f001 fa4b 	bl	8001ee0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20001808 	.word	0x20001808

08000a54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000a7e:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <MX_USART2_UART_Init+0x98>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000aa4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aa8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4812      	ldr	r0, [pc, #72]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000ac4:	f003 fe80 	bl	80047c8 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000ace:	f7ff ff64 	bl	800099a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000ad6:	f004 fc1b 	bl	8005310 <HAL_UARTEx_SetTxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000ae0:	f7ff ff5b 	bl	800099a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000ae8:	f004 fc50 	bl	800538c <HAL_UARTEx_SetRxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000af2:	f7ff ff52 	bl	800099a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART2_UART_Init+0x94>)
 8000af8:	f004 fbd1 	bl	800529e <HAL_UARTEx_DisableFifoMode>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000b02:	f7ff ff4a 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000029c 	.word	0x2000029c
 8000b10:	40004400 	.word	0x40004400

08000b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09e      	sub	sp, #120	; 0x78
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2254      	movs	r2, #84	; 0x54
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f009 f94d 	bl	8009dd4 <memset>
  if(uartHandle->Instance==USART2)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <HAL_UART_MspInit+0xa8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d136      	bne.n	8000bb2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fbeb 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b5c:	f7ff ff1d 	bl	800099a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_UART_MspInit+0xac>)
 8000b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b64:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_UART_MspInit+0xac>)
 8000b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_UART_MspInit+0xac>)
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_UART_MspInit+0xac>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7c:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_UART_MspInit+0xac>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_UART_MspInit+0xac>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b90:	230f      	movs	r3, #15
 8000b92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f000 f9b3 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3778      	adds	r7, #120	; 0x78
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ff44 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f009 f8cb 	bl	8009d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fe57 	bl	80008a8 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   r0, =_estack
 8000bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000c08:	08009e88 	.word	0x08009e88
  ldr r2, =_sbss
 8000c0c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000c10:	20001d04 	.word	0x20001d04

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>

08000c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f939 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f80e 	bl	8000c48 <HAL_InitTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e001      	b.n	8000c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c38:	f7ff feb4 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_InitTick+0x68>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d022      	beq.n	8000ca2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_InitTick+0x6c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_InitTick+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f944 	bl	8000efe <HAL_SYSTICK_Config>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10f      	bne.n	8000c9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d809      	bhi.n	8000c96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	2200      	movs	r2, #0
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8a:	f000 f910 	bl	8000eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0x70>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e004      	b.n	8000ca6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e001      	b.n	8000ca6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a03      	ldr	r2, [pc, #12]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000ccc:	6013      	str	r3, [r2, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	20000330 	.word	0x20000330
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000330 	.word	0x20000330

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff40 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5f 	bl	8000d98 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff33 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa4 	bl	8000e54 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f26:	e15a      	b.n	80011de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 814c 	beq.w	80011d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 0201 	and.w	r2, r3, #1
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	6939      	ldr	r1, [r7, #16]
 8001046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0203 	and.w	r2, r3, #3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80a6 	beq.w	80011d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <HAL_GPIO_Init+0x2e4>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001090:	4a5a      	ldr	r2, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x2e4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6613      	str	r3, [r2, #96]	; 0x60
 8001098:	4b58      	ldr	r3, [pc, #352]	; (80011fc <HAL_GPIO_Init+0x2e4>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a4:	4a56      	ldr	r2, [pc, #344]	; (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ce:	d01f      	beq.n	8001110 <HAL_GPIO_Init+0x1f8>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x2ec>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d019      	beq.n	800110c <HAL_GPIO_Init+0x1f4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <HAL_GPIO_Init+0x2f0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d013      	beq.n	8001108 <HAL_GPIO_Init+0x1f0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a4a      	ldr	r2, [pc, #296]	; (800120c <HAL_GPIO_Init+0x2f4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d00d      	beq.n	8001104 <HAL_GPIO_Init+0x1ec>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a49      	ldr	r2, [pc, #292]	; (8001210 <HAL_GPIO_Init+0x2f8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x1e8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a48      	ldr	r2, [pc, #288]	; (8001214 <HAL_GPIO_Init+0x2fc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d101      	bne.n	80010fc <HAL_GPIO_Init+0x1e4>
 80010f8:	2305      	movs	r3, #5
 80010fa:	e00a      	b.n	8001112 <HAL_GPIO_Init+0x1fa>
 80010fc:	2306      	movs	r3, #6
 80010fe:	e008      	b.n	8001112 <HAL_GPIO_Init+0x1fa>
 8001100:	2304      	movs	r3, #4
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x1fa>
 8001104:	2303      	movs	r3, #3
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x1fa>
 8001108:	2302      	movs	r3, #2
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x1fa>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x1fa>
 8001110:	2300      	movs	r3, #0
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001122:	4937      	ldr	r1, [pc, #220]	; (8001200 <HAL_GPIO_Init+0x2e8>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001130:	4b39      	ldr	r3, [pc, #228]	; (8001218 <HAL_GPIO_Init+0x300>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001154:	4a30      	ldr	r2, [pc, #192]	; (8001218 <HAL_GPIO_Init+0x300>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x300>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117e:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x300>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_GPIO_Init+0x300>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_GPIO_Init+0x300>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_GPIO_Init+0x300>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_GPIO_Init+0x300>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f47f ae9d 	bne.w	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	48000c00 	.word	0x48000c00
 8001210:	48001000 	.word	0x48001000
 8001214:	48001400 	.word	0x48001400
 8001218:	40010400 	.word	0x40010400

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001238:	e002      	b.n	8001240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0be      	b.n	80013dc <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d02e      	beq.n	8001308 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_HRTIM_Init+0x198>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d10b      	bne.n	80012cc <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_HRTIM_Init+0x19c>)
 80012b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_HRTIM_Init+0x19c>)
 80012ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012be:	6613      	str	r3, [r2, #96]	; 0x60
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_HRTIM_Init+0x19c>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012da:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fa57 	bl	80007bc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d012      	beq.n	8001340 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001328:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8001350:	2300      	movs	r3, #0
 8001352:	75fb      	strb	r3, [r7, #23]
 8001354:	e03e      	b.n	80013d4 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8001356:	7dfa      	ldrb	r2, [r7, #23]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	3318      	adds	r3, #24
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800136a:	7dfa      	ldrb	r2, [r7, #23]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	331c      	adds	r3, #28
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800137e:	7dfa      	ldrb	r2, [r7, #23]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	3320      	adds	r3, #32
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8001392:	7dfa      	ldrb	r2, [r7, #23]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3324      	adds	r3, #36	; 0x24
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80013a6:	7dfa      	ldrb	r2, [r7, #23]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3328      	adds	r3, #40	; 0x28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80013ba:	7dfa      	ldrb	r2, [r7, #23]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3330      	adds	r3, #48	; 0x30
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	3301      	adds	r3, #1
 80013d2:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d9bd      	bls.n	8001356 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40016800 	.word	0x40016800
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8001400:	2302      	movs	r3, #2
 8001402:	e045      	b.n	8001490 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141a:	d114      	bne.n	8001446 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0202 	bic.w	r2, r2, #2
 800142c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8001444:	e01f      	b.n	8001486 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0202 	orr.w	r2, r2, #2
 8001456:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8001462:	f023 010c 	bic.w	r1, r3, #12
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0201 	orr.w	r2, r2, #1
 8001482:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80014a6:	f7ff fc1b 	bl	8000ce0 <HAL_GetTick>
 80014aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80014ac:	e014      	b.n	80014d8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d010      	beq.n	80014d8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80014b6:	f7ff fc13 	bl	8000ce0 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d302      	bcc.n	80014cc <HAL_HRTIM_PollForDLLCalibration+0x30>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2207      	movs	r2, #7
 80014d0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e011      	b.n	80014fc <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d1e1      	bne.n	80014ae <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d101      	bne.n	8001520 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800151c:	2302      	movs	r3, #2
 800151e:	e015      	b.n	800154c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b06      	cmp	r3, #6
 800152c:	d104      	bne.n	8001538 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f998 	bl	8001866 <HRTIM_MasterBase_Config>
 8001536:	e004      	b.n	8001542 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	68b9      	ldr	r1, [r7, #8]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f9c1 	bl	80018c4 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_HRTIM_SimplePWMChannelConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMChannelConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t PWMChannel,
                                                  const HRTIM_SimplePWMChannelCfgTypeDef* pSimplePWMChannelCfg)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08e      	sub	sp, #56	; 0x38
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));
  assert_param(IS_HRTIM_OUTPUTPOLARITY(pSimplePWMChannelCfg->Polarity));
  assert_param(IS_HRTIM_OUTPUTPULSE(pSimplePWMChannelCfg->Pulse));
  assert_param(IS_HRTIM_OUTPUTIDLELEVEL(pSimplePWMChannelCfg->IdleLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d101      	bne.n	8001572 <HAL_HRTIM_SimplePWMChannelConfig+0x1e>
  {
     return HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	e0ea      	b.n	8001748 <HAL_HRTIM_SimplePWMChannelConfig+0x1f4>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_HRTIM_SimplePWMChannelConfig+0x2c>
 800157c:	2302      	movs	r3, #2
 800157e:	e0e3      	b.n	8001748 <HAL_HRTIM_SimplePWMChannelConfig+0x1f4>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure timer compare unit */
  switch (PWMChannel)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001596:	d07e      	beq.n	8001696 <HAL_HRTIM_SimplePWMChannelConfig+0x142>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159e:	f200 8086 	bhi.w	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d069      	beq.n	800167e <HAL_HRTIM_SimplePWMChannelConfig+0x12a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b0:	d87d      	bhi.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b8:	d06d      	beq.n	8001696 <HAL_HRTIM_SimplePWMChannelConfig+0x142>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c0:	d875      	bhi.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c8:	d059      	beq.n	800167e <HAL_HRTIM_SimplePWMChannelConfig+0x12a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d0:	d86d      	bhi.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b80      	cmp	r3, #128	; 0x80
 80015d6:	d05e      	beq.n	8001696 <HAL_HRTIM_SimplePWMChannelConfig+0x142>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b80      	cmp	r3, #128	; 0x80
 80015dc:	d867      	bhi.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d849      	bhi.n	8001678 <HAL_HRTIM_SimplePWMChannelConfig+0x124>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d061      	beq.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	2b1f      	cmp	r3, #31
 80015f0:	d85d      	bhi.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_HRTIM_SimplePWMChannelConfig+0xa4>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	0800167f 	.word	0x0800167f
 80015fc:	08001697 	.word	0x08001697
 8001600:	080016af 	.word	0x080016af
 8001604:	0800167f 	.word	0x0800167f
 8001608:	080016af 	.word	0x080016af
 800160c:	080016af 	.word	0x080016af
 8001610:	080016af 	.word	0x080016af
 8001614:	08001697 	.word	0x08001697
 8001618:	080016af 	.word	0x080016af
 800161c:	080016af 	.word	0x080016af
 8001620:	080016af 	.word	0x080016af
 8001624:	080016af 	.word	0x080016af
 8001628:	080016af 	.word	0x080016af
 800162c:	080016af 	.word	0x080016af
 8001630:	080016af 	.word	0x080016af
 8001634:	0800167f 	.word	0x0800167f
 8001638:	080016af 	.word	0x080016af
 800163c:	080016af 	.word	0x080016af
 8001640:	080016af 	.word	0x080016af
 8001644:	080016af 	.word	0x080016af
 8001648:	080016af 	.word	0x080016af
 800164c:	080016af 	.word	0x080016af
 8001650:	080016af 	.word	0x080016af
 8001654:	080016af 	.word	0x080016af
 8001658:	080016af 	.word	0x080016af
 800165c:	080016af 	.word	0x080016af
 8001660:	080016af 	.word	0x080016af
 8001664:	080016af 	.word	0x080016af
 8001668:	080016af 	.word	0x080016af
 800166c:	080016af 	.word	0x080016af
 8001670:	080016af 	.word	0x080016af
 8001674:	08001697 	.word	0x08001697
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b40      	cmp	r3, #64	; 0x40
 800167c:	d117      	bne.n	80016ae <HAL_HRTIM_SimplePWMChannelConfig+0x15a>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pSimplePWMChannelCfg->Pulse;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	01db      	lsls	r3, r3, #7
 800168a:	440b      	add	r3, r1
 800168c:	339c      	adds	r3, #156	; 0x9c
 800168e:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8001690:	2308      	movs	r3, #8
 8001692:	61bb      	str	r3, [r7, #24]
      break;
 8001694:	e018      	b.n	80016c8 <HAL_HRTIM_SimplePWMChannelConfig+0x174>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pSimplePWMChannelCfg->Pulse;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	01db      	lsls	r3, r3, #7
 80016a2:	440b      	add	r3, r1
 80016a4:	33a4      	adds	r3, #164	; 0xa4
 80016a6:	601a      	str	r2, [r3, #0]
      OutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 80016a8:	2310      	movs	r3, #16
 80016aa:	61bb      	str	r3, [r7, #24]
      break;
 80016ac:	e00c      	b.n	80016c8 <HAL_HRTIM_SimplePWMChannelConfig+0x174>
    }
  default:
    {
      OutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
      OutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]

      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2207      	movs	r2, #7
 80016ba:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 80016c6:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d101      	bne.n	80016d8 <HAL_HRTIM_SimplePWMChannelConfig+0x184>
  {
     return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e037      	b.n	8001748 <HAL_HRTIM_SimplePWMChannelConfig+0x1f4>
  }

  /* Configure timer output */
  OutputCfg.Polarity = (pSimplePWMChannelCfg->Polarity & HRTIM_OUTR_POL1);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
  OutputCfg.IdleLevel = (pSimplePWMChannelCfg->IdleLevel& HRTIM_OUTR_IDLES1);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  OutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  OutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  OutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  OutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  OutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMPER;
 80016fc:	2304      	movs	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]

  HRTIM_OutputConfig(hhrtim,
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f97b 	bl	8001a04 <HRTIM_OutputConfig>
                     TimerIdx,
                     PWMChannel,
                     &OutputCfg);

  /* Enable the registers preload mechanism */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	01db      	lsls	r3, r3, #7
 8001718:	4413      	add	r3, r2
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  hrtim_timcr |= HRTIM_TIMCR_PREEN;
 800171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3301      	adds	r3, #1
 800172e:	01db      	lsls	r3, r3, #7
 8001730:	4413      	add	r3, r2
 8001732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001734:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3738      	adds	r7, #56	; 0x38
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d101      	bne.n	800176c <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	e020      	b.n	80017ae <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_HRTIM_WaveformTimerControl+0x2a>
 8001776:	2302      	movs	r3, #2
 8001778:	e019      	b.n	80017ae <HAL_HRTIM_WaveformTimerControl+0x5e>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f8d8 	bl	8001944 <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fa44 	bl	8001c24 <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_HRTIM_WaveformOutputStart+0x18>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e01a      	b.n	8001804 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_HRTIM_WaveformCountStart+0x18>
 8001824:	2302      	movs	r3, #2
 8001826:	e018      	b.n	800185a <HAL_HRTIM_WaveformCountStart+0x4a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 0307 	bic.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f023 0318 	bic.w	r3, r3, #24
 8001890:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	6852      	ldr	r2, [r2, #4]
 80018b6:	619a      	str	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	3301      	adds	r3, #1
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4413      	add	r3, r2
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f023 0307 	bic.w	r3, r3, #7
 80018e6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f023 0318 	bic.w	r3, r3, #24
 80018f8:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4313      	orrs	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	3301      	adds	r3, #1
 800190c:	01db      	lsls	r3, r3, #7
 800190e:	4413      	add	r3, r2
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	01db      	lsls	r3, r3, #7
 8001920:	440b      	add	r3, r1
 8001922:	3394      	adds	r3, #148	; 0x94
 8001924:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	01db      	lsls	r3, r3, #7
 8001932:	440b      	add	r3, r1
 8001934:	3398      	adds	r3, #152	; 0x98
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	01db      	lsls	r3, r3, #7
 8001958:	4413      	add	r3, r2
 800195a:	33ec      	adds	r3, #236	; 0xec
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0310 	bic.w	r3, r3, #16
 8001966:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800197a:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800199e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d11a      	bne.n	80019e8 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f023 0302 	bic.w	r3, r3, #2
 80019ca:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	4413      	add	r3, r2
 80019f2:	33ec      	adds	r3, #236	; 0xec
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]

}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	01db      	lsls	r3, r3, #7
 8001a1e:	4413      	add	r3, r2
 8001a20:	33e4      	adds	r3, #228	; 0xe4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	01db      	lsls	r3, r3, #7
 8001a2e:	4413      	add	r3, r2
 8001a30:	33b8      	adds	r3, #184	; 0xb8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]

  switch (Output)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a3c:	f000 8088 	beq.w	8001b50 <HRTIM_OutputConfig+0x14c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a46:	f200 8098 	bhi.w	8001b7a <HRTIM_OutputConfig+0x176>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d06b      	beq.n	8001b2a <HRTIM_OutputConfig+0x126>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a58:	f200 808f 	bhi.w	8001b7a <HRTIM_OutputConfig+0x176>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a62:	d075      	beq.n	8001b50 <HRTIM_OutputConfig+0x14c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6a:	f200 8086 	bhi.w	8001b7a <HRTIM_OutputConfig+0x176>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a74:	d059      	beq.n	8001b2a <HRTIM_OutputConfig+0x126>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a7c:	d87d      	bhi.n	8001b7a <HRTIM_OutputConfig+0x176>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b80      	cmp	r3, #128	; 0x80
 8001a82:	d065      	beq.n	8001b50 <HRTIM_OutputConfig+0x14c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b80      	cmp	r3, #128	; 0x80
 8001a88:	d877      	bhi.n	8001b7a <HRTIM_OutputConfig+0x176>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d849      	bhi.n	8001b24 <HRTIM_OutputConfig+0x120>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d071      	beq.n	8001b7a <HRTIM_OutputConfig+0x176>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	2b1f      	cmp	r3, #31
 8001a9c:	d86d      	bhi.n	8001b7a <HRTIM_OutputConfig+0x176>
 8001a9e:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <HRTIM_OutputConfig+0xa0>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001b2b 	.word	0x08001b2b
 8001aa8:	08001b51 	.word	0x08001b51
 8001aac:	08001b7b 	.word	0x08001b7b
 8001ab0:	08001b2b 	.word	0x08001b2b
 8001ab4:	08001b7b 	.word	0x08001b7b
 8001ab8:	08001b7b 	.word	0x08001b7b
 8001abc:	08001b7b 	.word	0x08001b7b
 8001ac0:	08001b51 	.word	0x08001b51
 8001ac4:	08001b7b 	.word	0x08001b7b
 8001ac8:	08001b7b 	.word	0x08001b7b
 8001acc:	08001b7b 	.word	0x08001b7b
 8001ad0:	08001b7b 	.word	0x08001b7b
 8001ad4:	08001b7b 	.word	0x08001b7b
 8001ad8:	08001b7b 	.word	0x08001b7b
 8001adc:	08001b7b 	.word	0x08001b7b
 8001ae0:	08001b2b 	.word	0x08001b2b
 8001ae4:	08001b7b 	.word	0x08001b7b
 8001ae8:	08001b7b 	.word	0x08001b7b
 8001aec:	08001b7b 	.word	0x08001b7b
 8001af0:	08001b7b 	.word	0x08001b7b
 8001af4:	08001b7b 	.word	0x08001b7b
 8001af8:	08001b7b 	.word	0x08001b7b
 8001afc:	08001b7b 	.word	0x08001b7b
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001b7b 	.word	0x08001b7b
 8001b08:	08001b7b 	.word	0x08001b7b
 8001b0c:	08001b7b 	.word	0x08001b7b
 8001b10:	08001b7b 	.word	0x08001b7b
 8001b14:	08001b7b 	.word	0x08001b7b
 8001b18:	08001b7b 	.word	0x08001b7b
 8001b1c:	08001b7b 	.word	0x08001b7b
 8001b20:	08001b51 	.word	0x08001b51
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	d127      	bne.n	8001b7a <HRTIM_OutputConfig+0x176>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	01db      	lsls	r3, r3, #7
 8001b36:	440b      	add	r3, r1
 8001b38:	33bc      	adds	r3, #188	; 0xbc
 8001b3a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	440b      	add	r3, r1
 8001b4a:	33c0      	adds	r3, #192	; 0xc0
 8001b4c:	601a      	str	r2, [r3, #0]
      break;
 8001b4e:	e015      	b.n	8001b7c <HRTIM_OutputConfig+0x178>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	01db      	lsls	r3, r3, #7
 8001b5c:	440b      	add	r3, r1
 8001b5e:	33c4      	adds	r3, #196	; 0xc4
 8001b60:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	440b      	add	r3, r1
 8001b70:	33c8      	adds	r3, #200	; 0xc8
 8001b72:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8001b74:	2310      	movs	r3, #16
 8001b76:	61bb      	str	r3, [r7, #24]
      break;
 8001b78:	e000      	b.n	8001b7c <HRTIM_OutputConfig+0x178>
    }

  default:
    break;
 8001b7a:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8001b7c:	22fe      	movs	r2, #254	; 0xfe
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d111      	bne.n	8001c08 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HRTIM_OutputConfig+0x204>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HRTIM_OutputConfig+0x204>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4413      	add	r3, r2
 8001c12:	33e4      	adds	r3, #228	; 0xe4
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	3724      	adds	r7, #36	; 0x24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d85e      	bhi.n	8001cf2 <HRTIM_ForceRegistersUpdate+0xce>
 8001c34:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <HRTIM_ForceRegistersUpdate+0x18>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c6f 	.word	0x08001c6f
 8001c40:	08001c85 	.word	0x08001c85
 8001c44:	08001c9b 	.word	0x08001c9b
 8001c48:	08001cb1 	.word	0x08001cb1
 8001c4c:	08001cc7 	.word	0x08001cc7
 8001c50:	08001cdd 	.word	0x08001cdd
 8001c54:	08001c59 	.word	0x08001c59
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001c6c:	e042      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0202 	orr.w	r2, r2, #2
 8001c7e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001c82:	e037      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0204 	orr.w	r2, r2, #4
 8001c94:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001c98:	e02c      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001cae:	e021      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0210 	orr.w	r2, r2, #16
 8001cc0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001cc4:	e016      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001cda:	e00b      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8001cf0:	e000      	b.n	8001cf4 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8001cf2:	bf00      	nop
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0c0      	b.n	8001e94 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f007 fd2c 	bl	8009784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fbca 	bl	80054d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e03e      	b.n	8001dc2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3311      	adds	r3, #17
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	440b      	add	r3, r1
 8001d66:	3310      	adds	r3, #16
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	3313      	adds	r3, #19
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3320      	adds	r3, #32
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	3324      	adds	r3, #36	; 0x24
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	791b      	ldrb	r3, [r3, #4]
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3bb      	bcc.n	8001d44 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e044      	b.n	8001e5c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	791b      	ldrb	r3, [r3, #4]
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d3b5      	bcc.n	8001dd2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e72:	f003 fb49 	bl	8005508 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7a9b      	ldrb	r3, [r3, #10]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f001 fc41 	bl	8003714 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_PCD_Start+0x16>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e012      	b.n	8001ed8 <HAL_PCD_Start+0x3c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 faf0 	bl	80054a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fdb0 	bl	8007a2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fdb5 	bl	8007a5c <USB_ReadInterrupts>
 8001ef2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fb04 	bl	800250c <PCD_EP_ISR_Handler>

    return;
 8001f04:	e110      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f22:	b292      	uxth	r2, r2
 8001f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f007 fcbc 	bl	80098a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8fc 	bl	800212e <HAL_PCD_SetAddress>

    return;
 8001f36:	e0f7      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f54:	b292      	uxth	r2, r2
 8001f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f5a:	e0e5      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f7e:	e0d3      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d034      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0204 	bic.w	r2, r2, #4
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	b292      	uxth	r2, r2
 8001fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f007 fe5c 	bl	8009c8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f007 fc9f 	bl	8009918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fec:	b292      	uxth	r2, r2
 8001fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ff2:	e099      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d027      	beq.n	800204e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002006:	b29a      	uxth	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0208 	orr.w	r2, r2, #8
 8002010:	b292      	uxth	r2, r2
 8002012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0204 	orr.w	r2, r2, #4
 8002040:	b292      	uxth	r2, r2
 8002042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f007 fc4c 	bl	80098e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800204c:	e06c      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d040      	beq.n	80020da <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d12b      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0204 	orr.w	r2, r2, #4
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0208 	orr.w	r2, r2, #8
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020c8:	2101      	movs	r1, #1
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f007 fdde 	bl	8009c8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80020d0:	e02a      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f007 fc06 	bl	80098e4 <HAL_PCD_SuspendCallback>
    return;
 80020d8:	e026      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00f      	beq.n	8002104 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f6:	b292      	uxth	r2, r2
 80020f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f007 fbc4 	bl	800988a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002102:	e011      	b.n	8002128 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002126:	bf00      	nop
  }
}
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_PCD_SetAddress+0x1a>
 8002144:	2302      	movs	r3, #2
 8002146:	e012      	b.n	800216e <HAL_PCD_SetAddress+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f005 fc51 	bl	8007a06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	4608      	mov	r0, r1
 8002180:	4611      	mov	r1, r2
 8002182:	461a      	mov	r2, r3
 8002184:	4603      	mov	r3, r0
 8002186:	70fb      	strb	r3, [r7, #3]
 8002188:	460b      	mov	r3, r1
 800218a:	803b      	strh	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da0e      	bge.n	80021ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 0207 	and.w	r2, r3, #7
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	3310      	adds	r3, #16
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	705a      	strb	r2, [r3, #1]
 80021b8:	e00e      	b.n	80021d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 0207 	and.w	r2, r3, #7
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021e4:	883a      	ldrh	r2, [r7, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	78ba      	ldrb	r2, [r7, #2]
 80021ee:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021f0:	78bb      	ldrb	r3, [r7, #2]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d102      	bne.n	80021fc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_PCD_EP_Open+0x94>
 8002206:	2302      	movs	r3, #2
 8002208:	e00e      	b.n	8002228 <HAL_PCD_EP_Open+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 f993 	bl	8005544 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002226:	7afb      	ldrb	r3, [r7, #11]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800223c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	da0e      	bge.n	8002262 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 0207 	and.w	r2, r3, #7
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	3310      	adds	r3, #16
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	705a      	strb	r2, [r3, #1]
 8002260:	e00e      	b.n	8002280 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 0207 	and.w	r2, r3, #7
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_PCD_EP_Close+0x6a>
 8002296:	2302      	movs	r3, #2
 8002298:	e00e      	b.n	80022b8 <HAL_PCD_EP_Close+0x88>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fd0f 	bl	8005ccc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	460b      	mov	r3, r1
 80022ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2200      	movs	r2, #0
 80022fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	b2da      	uxtb	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6979      	ldr	r1, [r7, #20]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fec7 	bl	80060a6 <USB_EPStartXfer>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0207 	and.w	r2, r3, #7
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002344:	681b      	ldr	r3, [r3, #0]
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	f003 0207 	and.w	r2, r3, #7
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	3310      	adds	r3, #16
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2201      	movs	r2, #1
 800239c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6979      	ldr	r1, [r7, #20]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fe78 	bl	80060a6 <USB_EPStartXfer>

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7912      	ldrb	r2, [r2, #4]
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e03e      	b.n	800245c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da0e      	bge.n	8002404 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 0207 	and.w	r2, r3, #7
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	3310      	adds	r3, #16
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	705a      	strb	r2, [r3, #1]
 8002402:	e00c      	b.n	800241e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	b2da      	uxtb	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_PCD_EP_SetStall+0x7e>
 800243a:	2302      	movs	r3, #2
 800243c:	e00e      	b.n	800245c <HAL_PCD_EP_SetStall+0x9c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	4618      	mov	r0, r3
 800244e:	f005 f9db 	bl	8007808 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	7912      	ldrb	r2, [r2, #4]
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e040      	b.n	8002504 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da0e      	bge.n	80024a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0207 	and.w	r2, r3, #7
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	3310      	adds	r3, #16
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	705a      	strb	r2, [r3, #1]
 80024a6:	e00e      	b.n	80024c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_EP_ClrStall+0x82>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e00e      	b.n	8002504 <HAL_PCD_EP_ClrStall+0xa0>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f005 f9d8 	bl	80078aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b096      	sub	sp, #88	; 0x58
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002514:	e3ae      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002522:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002530:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 8170 	bne.w	800281a <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800253a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d14d      	bne.n	80025e2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	81fb      	strh	r3, [r7, #14]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	89fb      	ldrh	r3, [r7, #14]
 800255e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3310      	adds	r3, #16
 800256e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	4413      	add	r3, r2
 800258a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002596:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	441a      	add	r2, r3
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025a6:	2100      	movs	r1, #0
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f007 f954 	bl	8009856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 835d 	beq.w	8002c74 <PCD_EP_ISR_Handler+0x768>
 80025ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8358 	bne.w	8002c74 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7b1b      	ldrb	r3, [r3, #12]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b292      	uxth	r2, r2
 80025d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	731a      	strb	r2, [r3, #12]
 80025e0:	e348      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80025e8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d032      	beq.n	8002666 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	4413      	add	r3, r2
 800261a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002634:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800263a:	b29b      	uxth	r3, r3
 800263c:	f005 fa60 	bl	8007b00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	f640 738f 	movw	r3, #3983	; 0xf8f
 800264c:	4013      	ands	r3, r2
 800264e:	823b      	strh	r3, [r7, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	8a3a      	ldrh	r2, [r7, #16]
 8002656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800265a:	b292      	uxth	r2, r2
 800265c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f007 f8cc 	bl	80097fc <HAL_PCD_SetupStageCallback>
 8002664:	e306      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002666:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800266a:	2b00      	cmp	r3, #0
 800266c:	f280 8302 	bge.w	8002c74 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29a      	uxth	r2, r3
 8002678:	f640 738f 	movw	r3, #3983	; 0xf8f
 800267c:	4013      	ands	r3, r2
 800267e:	83fb      	strh	r3, [r7, #30]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	8bfa      	ldrh	r2, [r7, #30]
 8002686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268a:	b292      	uxth	r2, r2
 800268c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002696:	b29b      	uxth	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d019      	beq.n	80026f2 <PCD_EP_ISR_Handler+0x1e6>
 80026be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026cc:	6959      	ldr	r1, [r3, #20]
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f005 fa12 	bl	8007b00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	441a      	add	r2, r3
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026ea:	2100      	movs	r1, #0
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f007 f897 	bl	8009820 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80026fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 82b5 	bne.w	8002c74 <PCD_EP_ISR_Handler+0x768>
 800270a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800270e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002712:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002716:	f000 82ad 	beq.w	8002c74 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4413      	add	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002744:	b29a      	uxth	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b3e      	cmp	r3, #62	; 0x3e
 8002750:	d91d      	bls.n	800278e <PCD_EP_ISR_Handler+0x282>
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <PCD_EP_ISR_Handler+0x260>
 8002766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002768:	3b01      	subs	r3, #1
 800276a:	647b      	str	r3, [r7, #68]	; 0x44
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29a      	uxth	r2, r3
 8002772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002774:	b29b      	uxth	r3, r3
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	b29b      	uxth	r3, r3
 800277a:	4313      	orrs	r3, r2
 800277c:	b29b      	uxth	r3, r3
 800277e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002786:	b29a      	uxth	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	e026      	b.n	80027dc <PCD_EP_ISR_Handler+0x2d0>
 800278e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <PCD_EP_ISR_Handler+0x2a0>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	e017      	b.n	80027dc <PCD_EP_ISR_Handler+0x2d0>
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <PCD_EP_ISR_Handler+0x2ba>
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	3301      	adds	r3, #1
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	029b      	lsls	r3, r3, #10
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ec:	827b      	strh	r3, [r7, #18]
 80027ee:	8a7b      	ldrh	r3, [r7, #18]
 80027f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027f4:	827b      	strh	r3, [r7, #18]
 80027f6:	8a7b      	ldrh	r3, [r7, #18]
 80027f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027fc:	827b      	strh	r3, [r7, #18]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	8a7b      	ldrh	r3, [r7, #18]
 8002804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	b29b      	uxth	r3, r3
 8002816:	8013      	strh	r3, [r2, #0]
 8002818:	e22c      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800282e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002832:	2b00      	cmp	r3, #0
 8002834:	f280 80f6 	bge.w	8002a24 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29a      	uxth	r2, r3
 800284a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800284e:	4013      	ands	r3, r2
 8002850:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800286a:	b292      	uxth	r2, r2
 800286c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800286e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002886:	7b1b      	ldrb	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d123      	bne.n	80028d4 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80028b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 808e 	beq.w	80029da <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	6959      	ldr	r1, [r3, #20]
 80028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c8:	88da      	ldrh	r2, [r3, #6]
 80028ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028ce:	f005 f917 	bl	8007b00 <USB_ReadPMA>
 80028d2:	e082      	b.n	80029da <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	78db      	ldrb	r3, [r3, #3]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d10a      	bne.n	80028f2 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028e0:	461a      	mov	r2, r3
 80028e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f9d3 	bl	8002c90 <HAL_PCD_EP_DB_Receive>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028f0:	e073      	b.n	80029da <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800292a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002932:	b29b      	uxth	r3, r3
 8002934:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d022      	beq.n	8002996 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002958:	b29b      	uxth	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002978:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02c      	beq.n	80029da <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002986:	6959      	ldr	r1, [r3, #20]
 8002988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298a:	891a      	ldrh	r2, [r3, #8]
 800298c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002990:	f005 f8b6 	bl	8007b00 <USB_ReadPMA>
 8002994:	e021      	b.n	80029da <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80029be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029cc:	6959      	ldr	r1, [r3, #20]
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	895a      	ldrh	r2, [r3, #10]
 80029d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029d6:	f005 f893 	bl	8007b00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029e2:	441a      	add	r2, r3
 80029e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029f0:	441a      	add	r2, r3
 80029f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <PCD_EP_ISR_Handler+0x4fe>
 80029fe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d206      	bcs.n	8002a18 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f006 ff05 	bl	8009820 <HAL_PCD_DataOutStageCallback>
 8002a16:	e005      	b.n	8002a24 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 fb41 	bl	80060a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8121 	beq.w	8002c74 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a32:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	3310      	adds	r3, #16
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	f040 80a2 	bne.w	8002bd0 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	7b1b      	ldrb	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8093 	beq.w	8002bc2 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d046      	beq.n	8002b36 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d126      	bne.n	8002afe <PCD_EP_ISR_Handler+0x5f2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	4413      	add	r3, r2
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00da      	lsls	r2, r3, #3
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e061      	b.n	8002bc2 <PCD_EP_ISR_Handler+0x6b6>
 8002afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d15d      	bne.n	8002bc2 <PCD_EP_ISR_Handler+0x6b6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	00da      	lsls	r2, r3, #3
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	4413      	add	r3, r2
 8002b28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	2200      	movs	r2, #0
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e045      	b.n	8002bc2 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d126      	bne.n	8002b92 <PCD_EP_ISR_Handler+0x686>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	4413      	add	r3, r2
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	00da      	lsls	r2, r3, #3
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e017      	b.n	8002bc2 <PCD_EP_ISR_Handler+0x6b6>
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d113      	bne.n	8002bc2 <PCD_EP_ISR_Handler+0x6b6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	4413      	add	r3, r2
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	00da      	lsls	r2, r3, #3
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f006 fe44 	bl	8009856 <HAL_PCD_DataInStageCallback>
 8002bce:	e051      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d144      	bne.n	8002c66 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d907      	bls.n	8002c20 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c18:	1ad2      	subs	r2, r2, r3
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e002      	b.n	8002c26 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f006 fe0e 	bl	8009856 <HAL_PCD_DataInStageCallback>
 8002c3a:	e01b      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c44:	441a      	add	r2, r3
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c52:	441a      	add	r2, r3
 8002c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c56:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fa21 	bl	80060a6 <USB_EPStartXfer>
 8002c64:	e006      	b.n	8002c74 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f917 	bl	8002ea2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f6ff ac48 	blt.w	8002516 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3758      	adds	r7, #88	; 0x58
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d07c      	beq.n	8002da2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ccc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	8b7b      	ldrh	r3, [r7, #26]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d306      	bcc.n	8002ce6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	8b7b      	ldrh	r3, [r7, #26]
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	619a      	str	r2, [r3, #24]
 8002ce4:	e002      	b.n	8002cec <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d123      	bne.n	8002d3c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	833b      	strh	r3, [r7, #24]
 8002d10:	8b3b      	ldrh	r3, [r7, #24]
 8002d12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d16:	833b      	strh	r3, [r7, #24]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	8b3b      	ldrh	r3, [r7, #24]
 8002d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01f      	beq.n	8002d86 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d60:	82fb      	strh	r3, [r7, #22]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	8afb      	ldrh	r3, [r7, #22]
 8002d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d86:	8b7b      	ldrh	r3, [r7, #26]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8085 	beq.w	8002e98 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6959      	ldr	r1, [r3, #20]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	891a      	ldrh	r2, [r3, #8]
 8002d9a:	8b7b      	ldrh	r3, [r7, #26]
 8002d9c:	f004 feb0 	bl	8007b00 <USB_ReadPMA>
 8002da0:	e07a      	b.n	8002e98 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	8b7b      	ldrh	r3, [r7, #26]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d306      	bcc.n	8002de0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	8b7b      	ldrh	r3, [r7, #26]
 8002dd8:	1ad2      	subs	r2, r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	619a      	str	r2, [r3, #24]
 8002dde:	e002      	b.n	8002de6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d123      	bne.n	8002e36 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e08:	83fb      	strh	r3, [r7, #30]
 8002e0a:	8bfb      	ldrh	r3, [r7, #30]
 8002e0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e10:	83fb      	strh	r3, [r7, #30]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8bfb      	ldrh	r3, [r7, #30]
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11f      	bne.n	8002e80 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	83bb      	strh	r3, [r7, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	8bbb      	ldrh	r3, [r7, #28]
 8002e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6959      	ldr	r1, [r3, #20]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	895a      	ldrh	r2, [r3, #10]
 8002e92:	8b7b      	ldrh	r3, [r7, #26]
 8002e94:	f004 fe34 	bl	8007b00 <USB_ReadPMA>
    }
  }

  return count;
 8002e98:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b0a4      	sub	sp, #144	; 0x90
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 81db 	beq.w	8003272 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d907      	bls.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ef8:	1ad2      	subs	r2, r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	619a      	str	r2, [r3, #24]
 8002efe:	e002      	b.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f040 80b9 	bne.w	8003082 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d126      	bne.n	8002f66 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	4413      	add	r3, r2
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	00da      	lsls	r2, r3, #3
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	4413      	add	r3, r2
 8002f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	e01a      	b.n	8002f9c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d116      	bne.n	8002f9c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	4413      	add	r3, r2
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	00da      	lsls	r2, r3, #3
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	4413      	add	r3, r2
 8002f90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d126      	bne.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x156>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	00da      	lsls	r2, r3, #3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	e017      	b.n	8003028 <HAL_PCD_EP_DB_Transmit+0x186>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d113      	bne.n	8003028 <HAL_PCD_EP_DB_Transmit+0x186>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	4413      	add	r3, r2
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	00da      	lsls	r2, r3, #3
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	4413      	add	r3, r2
 800301c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2200      	movs	r2, #0
 8003026:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f006 fc11 	bl	8009856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 82fa 	beq.w	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	82fb      	strh	r3, [r7, #22]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	8afb      	ldrh	r3, [r7, #22]
 800306c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]
 8003080:	e2d8      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d021      	beq.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	441a      	add	r2, r3
 80030b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 82ac 	bne.w	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030e4:	441a      	add	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f2:	441a      	add	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d30b      	bcc.n	800311c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003114:	1ad2      	subs	r2, r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	621a      	str	r2, [r3, #32]
 800311a:	e017      	b.n	800314c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003124:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003134:	e00a      	b.n	800314c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d165      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003168:	4413      	add	r3, r2
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	00da      	lsls	r2, r3, #3
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	4413      	add	r3, r2
 8003176:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800317a:	63bb      	str	r3, [r7, #56]	; 0x38
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003186:	b29a      	uxth	r2, r3
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	801a      	strh	r2, [r3, #0]
 800318c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003190:	2b3e      	cmp	r3, #62	; 0x3e
 8003192:	d91d      	bls.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <HAL_PCD_EP_DB_Transmit+0x30c>
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	3b01      	subs	r3, #1
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	029b      	lsls	r3, r3, #10
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	e044      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_PCD_EP_DB_Transmit+0x34c>
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e035      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_PCD_EP_DB_Transmit+0x366>
 8003202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003204:	3301      	adds	r3, #1
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48
 8003208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29a      	uxth	r2, r3
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003210:	b29b      	uxth	r3, r3
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	b29b      	uxth	r3, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	b29a      	uxth	r2, r3
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	801a      	strh	r2, [r3, #0]
 800321e:	e01c      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d118      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323c:	4413      	add	r3, r2
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	00da      	lsls	r2, r3, #3
 8003246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003248:	4413      	add	r3, r2
 800324a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800324e:	643b      	str	r3, [r7, #64]	; 0x40
 8003250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003254:	b29a      	uxth	r2, r3
 8003256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003258:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6959      	ldr	r1, [r3, #20]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	891a      	ldrh	r2, [r3, #8]
 8003266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326a:	b29b      	uxth	r3, r3
 800326c:	f004 fc06 	bl	8007a7c <USB_WritePMA>
 8003270:	e1e0      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4413      	add	r3, r2
 800328c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003296:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d307      	bcc.n	80032b6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	619a      	str	r2, [r3, #24]
 80032b4:	e002      	b.n	80032bc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f040 80c0 	bne.w	8003446 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	785b      	ldrb	r3, [r3, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d126      	bne.n	800331c <HAL_PCD_EP_DB_Transmit+0x47a>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032dc:	b29b      	uxth	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032e2:	4413      	add	r3, r2
 80032e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032ee:	4413      	add	r3, r2
 80032f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80032f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003300:	b29a      	uxth	r2, r3
 8003302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003314:	b29a      	uxth	r2, r3
 8003316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	e01a      	b.n	8003352 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d116      	bne.n	8003352 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	667b      	str	r3, [r7, #100]	; 0x64
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003338:	4413      	add	r3, r2
 800333a:	667b      	str	r3, [r7, #100]	; 0x64
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	00da      	lsls	r2, r3, #3
 8003342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003344:	4413      	add	r3, r2
 8003346:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800334a:	663b      	str	r3, [r7, #96]	; 0x60
 800334c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800334e:	2200      	movs	r2, #0
 8003350:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	677b      	str	r3, [r7, #116]	; 0x74
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	785b      	ldrb	r3, [r3, #1]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d12b      	bne.n	80033b8 <HAL_PCD_EP_DB_Transmit+0x516>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	4413      	add	r3, r2
 8003376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	00da      	lsls	r2, r3, #3
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	4413      	add	r3, r2
 8003382:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800338a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003396:	b29a      	uxth	r2, r3
 8003398:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	e017      	b.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x546>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d113      	bne.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x546>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	4413      	add	r3, r2
 80033d0:	677b      	str	r3, [r7, #116]	; 0x74
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	00da      	lsls	r2, r3, #3
 80033d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033da:	4413      	add	r3, r2
 80033dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033e0:	673b      	str	r3, [r7, #112]	; 0x70
 80033e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e4:	2200      	movs	r2, #0
 80033e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4619      	mov	r1, r3
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f006 fa31 	bl	8009856 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 811a 	bne.w	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	b29b      	uxth	r3, r3
 8003442:	8013      	strh	r3, [r2, #0]
 8003444:	e0f6      	b.n	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d121      	bne.n	8003494 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	441a      	add	r2, r3
 800347c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003490:	b29b      	uxth	r3, r3
 8003492:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 80ca 	bne.w	8003634 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034a8:	441a      	add	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034b6:	441a      	add	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d30b      	bcc.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	621a      	str	r2, [r3, #32]
 80034de:	e017      	b.n	8003510 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80034e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034f8:	e00a      	b.n	8003510 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2200      	movs	r2, #0
 8003506:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	657b      	str	r3, [r7, #84]	; 0x54
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d165      	bne.n	80035ea <HAL_PCD_EP_DB_Transmit+0x748>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	4413      	add	r3, r2
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00da      	lsls	r2, r3, #3
 800353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353e:	4413      	add	r3, r2
 8003540:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003544:	65bb      	str	r3, [r7, #88]	; 0x58
 8003546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003550:	b29a      	uxth	r2, r3
 8003552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355a:	2b3e      	cmp	r3, #62	; 0x3e
 800355c:	d91d      	bls.n	800359a <HAL_PCD_EP_DB_Transmit+0x6f8>
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	66bb      	str	r3, [r7, #104]	; 0x68
 8003566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003574:	3b01      	subs	r3, #1
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
 8003578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003580:	b29b      	uxth	r3, r3
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	b29b      	uxth	r3, r3
 8003586:	4313      	orrs	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800358e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003592:	b29a      	uxth	r2, r3
 8003594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	e041      	b.n	800361e <HAL_PCD_EP_DB_Transmit+0x77c>
 800359a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_PCD_EP_DB_Transmit+0x716>
 80035a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e032      	b.n	800361e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x730>
 80035cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ce:	3301      	adds	r3, #1
 80035d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035da:	b29b      	uxth	r3, r3
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	e019      	b.n	800361e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	785b      	ldrb	r3, [r3, #1]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d115      	bne.n	800361e <HAL_PCD_EP_DB_Transmit+0x77c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	4413      	add	r3, r2
 8003602:	657b      	str	r3, [r7, #84]	; 0x54
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	00da      	lsls	r2, r3, #3
 800360a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360c:	4413      	add	r3, r2
 800360e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003612:	653b      	str	r3, [r7, #80]	; 0x50
 8003614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003618:	b29a      	uxth	r2, r3
 800361a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800361c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6959      	ldr	r1, [r3, #20]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	895a      	ldrh	r2, [r3, #10]
 800362a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800362e:	b29b      	uxth	r3, r3
 8003630:	f004 fa24 	bl	8007a7c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364e:	82bb      	strh	r3, [r7, #20]
 8003650:	8abb      	ldrh	r3, [r7, #20]
 8003652:	f083 0310 	eor.w	r3, r3, #16
 8003656:	82bb      	strh	r3, [r7, #20]
 8003658:	8abb      	ldrh	r3, [r7, #20]
 800365a:	f083 0320 	eor.w	r3, r3, #32
 800365e:	82bb      	strh	r3, [r7, #20]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	8abb      	ldrh	r3, [r7, #20]
 8003670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003680:	b29b      	uxth	r3, r3
 8003682:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3790      	adds	r7, #144	; 0x90
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800368e:	b480      	push	{r7}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	817b      	strh	r3, [r7, #10]
 800369c:	4613      	mov	r3, r2
 800369e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	f003 0207 	and.w	r2, r3, #7
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	3310      	adds	r3, #16
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e009      	b.n	80036d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036c4:	897a      	ldrh	r2, [r7, #10]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4413      	add	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036d8:	893b      	ldrh	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	80da      	strh	r2, [r3, #6]
 80036ec:	e00b      	b.n	8003706 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2201      	movs	r2, #1
 80036f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	b29a      	uxth	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003738:	b29b      	uxth	r3, r3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800374c:	b29b      	uxth	r3, r3
 800374e:	f043 0302 	orr.w	r3, r3, #2
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d141      	bne.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003776:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003782:	d131      	bne.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003784:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378a:	4a46      	ldr	r2, [pc, #280]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003794:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800379c:	4a41      	ldr	r2, [pc, #260]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037a4:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2232      	movs	r2, #50	; 0x32
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a3f      	ldr	r2, [pc, #252]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	0c9b      	lsrs	r3, r3, #18
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ba:	e002      	b.n	80037c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3b01      	subs	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d102      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f2      	bne.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037d6:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d158      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e057      	b.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037f8:	e04d      	b.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d141      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d131      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003816:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003828:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2232      	movs	r2, #50	; 0x32
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003846:	e002      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d102      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f2      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d112      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e011      	b.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003884:	e007      	b.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003894:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40007000 	.word	0x40007000
 80038a8:	20000000 	.word	0x20000000
 80038ac:	431bde83 	.word	0x431bde83

080038b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038be:	6093      	str	r3, [r2, #8]
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e2fe      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b97      	ldr	r3, [pc, #604]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f8:	4b94      	ldr	r3, [pc, #592]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d102      	bne.n	800390e <HAL_RCC_OscConfig+0x3e>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d002      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e2d9      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a84      	ldr	r2, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7e      	ldr	r2, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a77      	ldr	r2, [pc, #476]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b75      	ldr	r3, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fd f9aa 	bl	8000ce0 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fd f9a6 	bl	8000ce0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e29e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fd f996 	bl	8000ce0 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fd f992 	bl	8000ce0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e28a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d075      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e6:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039f0:	4b56      	ldr	r3, [pc, #344]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_OscConfig+0x136>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_OscConfig+0x13c>
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11f      	bne.n	8003a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x154>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e25d      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	4946      	ldr	r1, [pc, #280]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a38:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd f903 	bl	8000c48 <HAL_InitTick>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d043      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e249      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d023      	beq.n	8003a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd f93e 	bl	8000ce0 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a68:	f7fd f93a 	bl	8000ce0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e232      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b31      	ldr	r3, [pc, #196]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
 8003a9a:	e01a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd f91a 	bl	8000ce0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fd f916 	bl	8000ce0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e20e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1e0>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d041      	beq.n	8003b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fd f8f3 	bl	8000ce0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fd f8ef 	bl	8000ce0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1e7      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ef      	beq.n	8003afe <HAL_RCC_OscConfig+0x22e>
 8003b1e:	e020      	b.n	8003b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_OscConfig+0x27c>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd f8d6 	bl	8000ce0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b36:	e00d      	b.n	8003b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fd f8d2 	bl	8000ce0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d906      	bls.n	8003b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e1ca      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b54:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ea      	bne.n	8003b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80a6 	beq.w	8003cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b70:	2300      	movs	r3, #0
 8003b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b74:	4b84      	ldr	r3, [pc, #528]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2b4>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x2b6>
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6593      	str	r3, [r2, #88]	; 0x58
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba6:	4b79      	ldr	r3, [pc, #484]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d118      	bne.n	8003be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb2:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a75      	ldr	r2, [pc, #468]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd f88f 	bl	8000ce0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fd f88b 	bl	8000ce0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e183      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd8:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <HAL_RCC_OscConfig+0x4bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <HAL_RCC_OscConfig+0x32e>
 8003bec:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	4a65      	ldr	r2, [pc, #404]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfc:	e024      	b.n	8003c48 <HAL_RCC_OscConfig+0x378>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d110      	bne.n	8003c28 <HAL_RCC_OscConfig+0x358>
 8003c06:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	4a5e      	ldr	r2, [pc, #376]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c16:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c26:	e00f      	b.n	8003c48 <HAL_RCC_OscConfig+0x378>
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c38:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a52      	ldr	r2, [pc, #328]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fd f846 	bl	8000ce0 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fd f842 	bl	8000ce0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e138      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6e:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ed      	beq.n	8003c58 <HAL_RCC_OscConfig+0x388>
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fd f82f 	bl	8000ce0 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd f82b 	bl	8000ce0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e121      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c9c:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ed      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003caa:	7ffb      	ldrb	r3, [r7, #31]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fc fffe 	bl	8000ce0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce8:	f7fc fffa 	bl	8000ce0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0f2      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x418>
 8003d08:	e01b      	b.n	8003d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d10:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fc ffe1 	bl	8000ce0 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d22:	f7fc ffdd 	bl	8000ce0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0d5      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d34:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80c9 	beq.w	8003ede <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	f000 8083 	beq.w	8003e60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d15e      	bne.n	8003e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_RCC_OscConfig+0x4b8>)
 8003d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fc ffb7 	bl	8000ce0 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d74:	e00c      	b.n	8003d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fc ffb3 	bl	8000ce0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d905      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e0ab      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ec      	bne.n	8003d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	4b52      	ldr	r3, [pc, #328]	; (8003eec <HAL_RCC_OscConfig+0x61c>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6a11      	ldr	r1, [r2, #32]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003db6:	0212      	lsls	r2, r2, #8
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dbe:	0852      	lsrs	r2, r2, #1
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0552      	lsls	r2, r2, #21
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0652      	lsls	r2, r2, #25
 8003dd0:	4311      	orrs	r1, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dd6:	06d2      	lsls	r2, r2, #27
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4943      	ldr	r1, [pc, #268]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a3d      	ldr	r2, [pc, #244]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fc ff72 	bl	8000ce0 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fc ff6e 	bl	8000ce0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e066      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x530>
 8003e1e:	e05e      	b.n	8003ede <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fc ff58 	bl	8000ce0 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fc ff54 	bl	8000ce0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e52:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4924      	ldr	r1, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_OscConfig+0x620>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
 8003e5e:	e03e      	b.n	8003ede <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e039      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_OscConfig+0x618>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0203 	and.w	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d12c      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d123      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11b      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d113      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	019f800c 	.word	0x019f800c
 8003ef0:	feeefffc 	.word	0xfeeefffc

08003ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e11e      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b91      	ldr	r3, [pc, #580]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d910      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b8e      	ldr	r3, [pc, #568]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 020f 	bic.w	r2, r3, #15
 8003f22:	498c      	ldr	r1, [pc, #560]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e106      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d073      	beq.n	8004030 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d129      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0f4      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f60:	f000 f99e 	bl	80042a0 <RCC_GetSysClockFreqFromPLLSource>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_ClockConfig+0x268>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d93f      	bls.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d033      	beq.n	8003fee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12f      	bne.n	8003fee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f96:	4a70      	ldr	r2, [pc, #448]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e024      	b.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0c6      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbc:	4b66      	ldr	r3, [pc, #408]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0be      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fcc:	f000 f8ce 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4a61      	ldr	r2, [pc, #388]	; (800415c <HAL_RCC_ClockConfig+0x268>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d909      	bls.n	8003fee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe2:	4a5d      	ldr	r2, [pc, #372]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fee:	4b5a      	ldr	r3, [pc, #360]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4957      	ldr	r1, [pc, #348]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fc fe6e 	bl	8000ce0 <HAL_GetTick>
 8004004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	e00a      	b.n	800401e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004008:	f7fc fe6a 	bl	8000ce0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e095      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	4b4e      	ldr	r3, [pc, #312]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 020c 	and.w	r2, r3, #12
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	429a      	cmp	r2, r3
 800402e:	d1eb      	bne.n	8004008 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d023      	beq.n	8004084 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004060:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004068:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800406a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800406e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4936      	ldr	r1, [pc, #216]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
 8004082:	e008      	b.n	8004096 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d105      	bne.n	8004096 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800408a:	4b33      	ldr	r3, [pc, #204]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004094:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d21d      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 020f 	bic.w	r2, r3, #15
 80040ac:	4929      	ldr	r1, [pc, #164]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040b4:	f7fc fe14 	bl	8000ce0 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fc fe10 	bl	8000ce0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e03b      	b.n	800414a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_RCC_ClockConfig+0x260>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1ed      	bne.n	80040bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	490f      	ldr	r1, [pc, #60]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411e:	f000 f825 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	490c      	ldr	r1, [pc, #48]	; (8004160 <HAL_RCC_ClockConfig+0x26c>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	fa22 f303 	lsr.w	r3, r2, r3
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x270>)
 800413c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x274>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fd80 	bl	8000c48 <HAL_InitTick>
 8004148:	4603      	mov	r3, r0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40022000 	.word	0x40022000
 8004158:	40021000 	.word	0x40021000
 800415c:	04c4b400 	.word	0x04c4b400
 8004160:	08009e38 	.word	0x08009e38
 8004164:	20000000 	.word	0x20000000
 8004168:	20000004 	.word	0x20000004

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b04      	cmp	r3, #4
 800417c:	d102      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e047      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
 800418c:	2b08      	cmp	r3, #8
 800418e:	d102      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004190:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e03e      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004196:	4b23      	ldr	r3, [pc, #140]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d136      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ca:	68d2      	ldr	r2, [r2, #12]
 80041cc:	0a12      	lsrs	r2, r2, #8
 80041ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	0a12      	lsrs	r2, r2, #8
 80041e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	3301      	adds	r3, #1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	fbb2 f3f3 	udiv	r3, r2, r3
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	e001      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004214:	693b      	ldr	r3, [r7, #16]
}
 8004216:	4618      	mov	r0, r3
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	00f42400 	.word	0x00f42400
 800422c:	0112a880 	.word	0x0112a880

08004230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800424c:	f7ff fff0 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4904      	ldr	r1, [pc, #16]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	08009e48 	.word	0x08009e48

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004278:	f7ff ffda 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4904      	ldr	r1, [pc, #16]	; (800429c <HAL_RCC_GetPCLK2Freq+0x28>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	08009e48 	.word	0x08009e48

080042a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d10c      	bne.n	80042de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ce:	68d2      	ldr	r2, [r2, #12]
 80042d0:	0a12      	lsrs	r2, r2, #8
 80042d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	617b      	str	r3, [r7, #20]
    break;
 80042dc:	e00c      	b.n	80042f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	0a12      	lsrs	r2, r2, #8
 80042ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
    break;
 80042f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0e5b      	lsrs	r3, r3, #25
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004312:	687b      	ldr	r3, [r7, #4]
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40021000 	.word	0x40021000
 8004324:	0112a880 	.word	0x0112a880
 8004328:	00f42400 	.word	0x00f42400

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004334:	2300      	movs	r3, #0
 8004336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004338:	2300      	movs	r3, #0
 800433a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8098 	beq.w	800447a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434e:	4b43      	ldr	r3, [pc, #268]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	4a3f      	ldr	r2, [pc, #252]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6593      	str	r3, [r2, #88]	; 0x58
 8004366:	4b3d      	ldr	r3, [pc, #244]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004372:	2301      	movs	r3, #1
 8004374:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004376:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004382:	f7fc fcad 	bl	8000ce0 <HAL_GetTick>
 8004386:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004388:	e009      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438a:	f7fc fca9 	bl	8000ce0 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d902      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	74fb      	strb	r3, [r7, #19]
        break;
 800439c:	e005      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ef      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d159      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d019      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043cc:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fc fc69 	bl	8000ce0 <HAL_GetTick>
 800440e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004410:	e00b      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fc fc65 	bl	8000ce0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d902      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	74fb      	strb	r3, [r7, #19]
            break;
 8004428:	e006      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442a:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ec      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	74bb      	strb	r3, [r7, #18]
 800445a:	e005      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004468:	7c7b      	ldrb	r3, [r7, #17]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446e:	4ba7      	ldr	r3, [pc, #668]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	4aa6      	ldr	r2, [pc, #664]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004486:	4ba1      	ldr	r3, [pc, #644]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f023 0203 	bic.w	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	499d      	ldr	r1, [pc, #628]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a8:	4b98      	ldr	r3, [pc, #608]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 020c 	bic.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4995      	ldr	r1, [pc, #596]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044ca:	4b90      	ldr	r3, [pc, #576]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	498c      	ldr	r1, [pc, #560]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ec:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	4984      	ldr	r1, [pc, #528]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800450e:	4b7f      	ldr	r3, [pc, #508]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	497b      	ldr	r1, [pc, #492]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004530:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	4973      	ldr	r1, [pc, #460]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004552:	4b6e      	ldr	r3, [pc, #440]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	496a      	ldr	r1, [pc, #424]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004574:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4962      	ldr	r1, [pc, #392]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	4959      	ldr	r1, [pc, #356]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045b8:	4b54      	ldr	r3, [pc, #336]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	4951      	ldr	r1, [pc, #324]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	4948      	ldr	r1, [pc, #288]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fc:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4940      	ldr	r1, [pc, #256]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a3a      	ldr	r2, [pc, #232]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004626:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004634:	4b35      	ldr	r3, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	4932      	ldr	r1, [pc, #200]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a2c      	ldr	r2, [pc, #176]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800466c:	4b27      	ldr	r3, [pc, #156]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4924      	ldr	r1, [pc, #144]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b1f      	ldr	r3, [pc, #124]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	4916      	ldr	r1, [pc, #88]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a10      	ldr	r2, [pc, #64]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d019      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4908      	ldr	r1, [pc, #32]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fa:	d109      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a02      	ldr	r2, [pc, #8]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4926      	ldr	r1, [pc, #152]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004746:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004762:	4918      	ldr	r1, [pc, #96]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004774:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d015      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800478e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047aa:	d105      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e042      	b.n	8004860 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fc f991 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2224      	movs	r2, #36	; 0x24
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fb24 	bl	8004e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f825 	bl	8004868 <UART_SetConfig>
 800481e:	4603      	mov	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e01b      	b.n	8004860 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fba3 	bl	8004fa4 <UART_CheckIdleState>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b08c      	sub	sp, #48	; 0x30
 800486e:	af00      	add	r7, sp, #0
 8004870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	431a      	orrs	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4baa      	ldr	r3, [pc, #680]	; (8004b40 <UART_SetConfig+0x2d8>)
 8004898:	4013      	ands	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a9f      	ldr	r2, [pc, #636]	; (8004b44 <UART_SetConfig+0x2dc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f023 010f 	bic.w	r1, r3, #15
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a90      	ldr	r2, [pc, #576]	; (8004b48 <UART_SetConfig+0x2e0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d125      	bne.n	8004958 <UART_SetConfig+0xf0>
 800490c:	4b8f      	ldr	r3, [pc, #572]	; (8004b4c <UART_SetConfig+0x2e4>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d81a      	bhi.n	8004950 <UART_SetConfig+0xe8>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0xb8>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004931 	.word	0x08004931
 8004924:	08004941 	.word	0x08004941
 8004928:	08004939 	.word	0x08004939
 800492c:	08004949 	.word	0x08004949
 8004930:	2301      	movs	r3, #1
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e116      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e112      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004946:	e10e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e10a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e106      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a7c      	ldr	r2, [pc, #496]	; (8004b50 <UART_SetConfig+0x2e8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d138      	bne.n	80049d4 <UART_SetConfig+0x16c>
 8004962:	4b7a      	ldr	r3, [pc, #488]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d82d      	bhi.n	80049cc <UART_SetConfig+0x164>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x110>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049ad 	.word	0x080049ad
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049b5 	.word	0x080049b5
 800499c:	080049cd 	.word	0x080049cd
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e0d8      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e0d4      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c2:	e0d0      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e0cc      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e0c8      	b.n	8004b66 <UART_SetConfig+0x2fe>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5e      	ldr	r2, [pc, #376]	; (8004b54 <UART_SetConfig+0x2ec>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d125      	bne.n	8004a2a <UART_SetConfig+0x1c2>
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <UART_SetConfig+0x2e4>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049e8:	2b30      	cmp	r3, #48	; 0x30
 80049ea:	d016      	beq.n	8004a1a <UART_SetConfig+0x1b2>
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d818      	bhi.n	8004a22 <UART_SetConfig+0x1ba>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d00a      	beq.n	8004a0a <UART_SetConfig+0x1a2>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d814      	bhi.n	8004a22 <UART_SetConfig+0x1ba>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <UART_SetConfig+0x19a>
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d008      	beq.n	8004a12 <UART_SetConfig+0x1aa>
 8004a00:	e00f      	b.n	8004a22 <UART_SetConfig+0x1ba>
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a08:	e0ad      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a10:	e0a9      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a12:	2304      	movs	r3, #4
 8004a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a18:	e0a5      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a20:	e0a1      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a22:	2310      	movs	r3, #16
 8004a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a28:	e09d      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a4a      	ldr	r2, [pc, #296]	; (8004b58 <UART_SetConfig+0x2f0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d125      	bne.n	8004a80 <UART_SetConfig+0x218>
 8004a34:	4b45      	ldr	r3, [pc, #276]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a40:	d016      	beq.n	8004a70 <UART_SetConfig+0x208>
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d818      	bhi.n	8004a78 <UART_SetConfig+0x210>
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d00a      	beq.n	8004a60 <UART_SetConfig+0x1f8>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d814      	bhi.n	8004a78 <UART_SetConfig+0x210>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <UART_SetConfig+0x1f0>
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d008      	beq.n	8004a68 <UART_SetConfig+0x200>
 8004a56:	e00f      	b.n	8004a78 <UART_SetConfig+0x210>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5e:	e082      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a60:	2302      	movs	r3, #2
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a66:	e07e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a6e:	e07a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a70:	2308      	movs	r3, #8
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a76:	e076      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a7e:	e072      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a35      	ldr	r2, [pc, #212]	; (8004b5c <UART_SetConfig+0x2f4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d12a      	bne.n	8004ae0 <UART_SetConfig+0x278>
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a98:	d01a      	beq.n	8004ad0 <UART_SetConfig+0x268>
 8004a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9e:	d81b      	bhi.n	8004ad8 <UART_SetConfig+0x270>
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d00c      	beq.n	8004ac0 <UART_SetConfig+0x258>
 8004aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aaa:	d815      	bhi.n	8004ad8 <UART_SetConfig+0x270>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <UART_SetConfig+0x250>
 8004ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab4:	d008      	beq.n	8004ac8 <UART_SetConfig+0x260>
 8004ab6:	e00f      	b.n	8004ad8 <UART_SetConfig+0x270>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004abe:	e052      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac6:	e04e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ace:	e04a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ad6:	e046      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	e042      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <UART_SetConfig+0x2dc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d13a      	bne.n	8004b60 <UART_SetConfig+0x2f8>
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <UART_SetConfig+0x2e4>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004af8:	d01a      	beq.n	8004b30 <UART_SetConfig+0x2c8>
 8004afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afe:	d81b      	bhi.n	8004b38 <UART_SetConfig+0x2d0>
 8004b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b04:	d00c      	beq.n	8004b20 <UART_SetConfig+0x2b8>
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0a:	d815      	bhi.n	8004b38 <UART_SetConfig+0x2d0>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <UART_SetConfig+0x2b0>
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d008      	beq.n	8004b28 <UART_SetConfig+0x2c0>
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x2d0>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1e:	e022      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b20:	2302      	movs	r3, #2
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b26:	e01e      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e01a      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b30:	2308      	movs	r3, #8
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e016      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e012      	b.n	8004b66 <UART_SetConfig+0x2fe>
 8004b40:	cfff69f3 	.word	0xcfff69f3
 8004b44:	40008000 	.word	0x40008000
 8004b48:	40013800 	.word	0x40013800
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40004400 	.word	0x40004400
 8004b54:	40004800 	.word	0x40004800
 8004b58:	40004c00 	.word	0x40004c00
 8004b5c:	40005000 	.word	0x40005000
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4aae      	ldr	r2, [pc, #696]	; (8004e24 <UART_SetConfig+0x5bc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	f040 8097 	bne.w	8004ca0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d823      	bhi.n	8004bc2 <UART_SetConfig+0x35a>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x318>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bc3 	.word	0x08004bc3
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bc3 	.word	0x08004bc3
 8004b90:	08004bb3 	.word	0x08004bb3
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	08004bc3 	.word	0x08004bc3
 8004b9c:	08004bc3 	.word	0x08004bc3
 8004ba0:	08004bbb 	.word	0x08004bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7ff fb50 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e010      	b.n	8004bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b9e      	ldr	r3, [pc, #632]	; (8004e28 <UART_SetConfig+0x5c0>)
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb0:	e00d      	b.n	8004bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb2:	f7ff fadb 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb8:	e009      	b.n	8004bce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc0:	e005      	b.n	8004bce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8130 	beq.w	8004e36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	4a94      	ldr	r2, [pc, #592]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4413      	add	r3, r2
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d305      	bcc.n	8004c06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d903      	bls.n	8004c0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c0c:	e113      	b.n	8004e36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2200      	movs	r2, #0
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	60fa      	str	r2, [r7, #12]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	4a84      	ldr	r2, [pc, #528]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2200      	movs	r2, #0
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c30:	f7fb faf2 	bl	8000218 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	020b      	lsls	r3, r1, #8
 8004c46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c4a:	0202      	lsls	r2, r0, #8
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	6849      	ldr	r1, [r1, #4]
 8004c50:	0849      	lsrs	r1, r1, #1
 8004c52:	2000      	movs	r0, #0
 8004c54:	460c      	mov	r4, r1
 8004c56:	4605      	mov	r5, r0
 8004c58:	eb12 0804 	adds.w	r8, r2, r4
 8004c5c:	eb43 0905 	adc.w	r9, r3, r5
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	469a      	mov	sl, r3
 8004c68:	4693      	mov	fp, r2
 8004c6a:	4652      	mov	r2, sl
 8004c6c:	465b      	mov	r3, fp
 8004c6e:	4640      	mov	r0, r8
 8004c70:	4649      	mov	r1, r9
 8004c72:	f7fb fad1 	bl	8000218 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c84:	d308      	bcc.n	8004c98 <UART_SetConfig+0x430>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8c:	d204      	bcs.n	8004c98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	e0ce      	b.n	8004e36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c9e:	e0ca      	b.n	8004e36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d166      	bne.n	8004d78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d827      	bhi.n	8004d02 <UART_SetConfig+0x49a>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x450>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7ff fab4 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ce2:	e014      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7ff fac6 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cea:	e010      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b4e      	ldr	r3, [pc, #312]	; (8004e28 <UART_SetConfig+0x5c0>)
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cf0:	e00d      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7ff fa3b 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cf8:	e009      	b.n	8004d0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d00:	e005      	b.n	8004d0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8090 	beq.w	8004e36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	4a44      	ldr	r2, [pc, #272]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d28:	005a      	lsls	r2, r3, #1
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	441a      	add	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d916      	bls.n	8004d70 <UART_SetConfig+0x508>
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d212      	bcs.n	8004d70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f023 030f 	bic.w	r3, r3, #15
 8004d52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	8bfb      	ldrh	r3, [r7, #30]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	8bfa      	ldrh	r2, [r7, #30]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e062      	b.n	8004e36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d76:	e05e      	b.n	8004e36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d828      	bhi.n	8004dd2 <UART_SetConfig+0x56a>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x520>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dbd 	.word	0x08004dbd
 8004d94:	08004dd3 	.word	0x08004dd3
 8004d98:	08004dc3 	.word	0x08004dc3
 8004d9c:	08004dd3 	.word	0x08004dd3
 8004da0:	08004dd3 	.word	0x08004dd3
 8004da4:	08004dd3 	.word	0x08004dd3
 8004da8:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dac:	f7ff fa4c 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db2:	e014      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db4:	f7ff fa5e 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dba:	e010      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <UART_SetConfig+0x5c0>)
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dc0:	e00d      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7ff f9d3 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dc8:	e009      	b.n	8004dde <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dd0:	e005      	b.n	8004dde <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d028      	beq.n	8004e36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <UART_SetConfig+0x5c4>)
 8004dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dee:	461a      	mov	r2, r3
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	441a      	add	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d910      	bls.n	8004e30 <UART_SetConfig+0x5c8>
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e14:	d20c      	bcs.n	8004e30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x5ce>
 8004e22:	bf00      	nop
 8004e24:	40008000 	.word	0x40008000
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	08009e50 	.word	0x08009e50
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e52:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3730      	adds	r7, #48	; 0x30
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01a      	beq.n	8004f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5e:	d10a      	bne.n	8004f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b098      	sub	sp, #96	; 0x60
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fb4:	f7fb fe94 	bl	8000ce0 <HAL_GetTick>
 8004fb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d12f      	bne.n	8005028 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f88e 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d022      	beq.n	8005028 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
 8005002:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800500e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e063      	b.n	80050f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d149      	bne.n	80050ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503e:	2200      	movs	r2, #0
 8005040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f857 	bl	80050f8 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d03c      	beq.n	80050ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	623b      	str	r3, [r7, #32]
   return(result);
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
 8005070:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	60fb      	str	r3, [r7, #12]
   return(result);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a2:	61fa      	str	r2, [r7, #28]
 80050a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	69b9      	ldr	r1, [r7, #24]
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	617b      	str	r3, [r7, #20]
   return(result);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e012      	b.n	80050f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3758      	adds	r7, #88	; 0x58
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005108:	e04f      	b.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d04b      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fb fde5 	bl	8000ce0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <UART_WaitOnFlagUntilTimeout+0x30>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e04e      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d037      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d034      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d031      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b08      	cmp	r3, #8
 8005152:	d110      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2208      	movs	r2, #8
 800515a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f838 	bl	80051d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2208      	movs	r2, #8
 8005166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e029      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005184:	d111      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f81e 	bl	80051d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00f      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4013      	ands	r3, r2
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf0c      	ite	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	2300      	movne	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d0a0      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b095      	sub	sp, #84	; 0x54
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f8:	643b      	str	r3, [r7, #64]	; 0x40
 80051fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e6      	bne.n	80051da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3308      	adds	r3, #8
 8005212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	61fb      	str	r3, [r7, #28]
   return(result);
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	64bb      	str	r3, [r7, #72]	; 0x48
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e3      	bne.n	800520c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d118      	bne.n	800527e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60bb      	str	r3, [r7, #8]
   return(result);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0310 	bic.w	r3, r3, #16
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6979      	ldr	r1, [r7, #20]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	613b      	str	r3, [r7, #16]
   return(result);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005292:	bf00      	nop
 8005294:	3754      	adds	r7, #84	; 0x54
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e027      	b.n	8005304 <HAL_UARTEx_DisableFifoMode+0x66>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	; 0x24
 80052c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e02d      	b.n	8005384 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f84f 	bl	8005408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e02d      	b.n	8005400 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	; 0x24
 80053b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f811 	bl	8005408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005414:	2b00      	cmp	r3, #0
 8005416:	d108      	bne.n	800542a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005428:	e031      	b.n	800548e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800542a:	2308      	movs	r3, #8
 800542c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800542e:	2308      	movs	r3, #8
 8005430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	0e5b      	lsrs	r3, r3, #25
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	0f5b      	lsrs	r3, r3, #29
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	7b3a      	ldrb	r2, [r7, #12]
 8005456:	4911      	ldr	r1, [pc, #68]	; (800549c <UARTEx_SetNbDataToProcess+0x94>)
 8005458:	5c8a      	ldrb	r2, [r1, r2]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800545e:	7b3a      	ldrb	r2, [r7, #12]
 8005460:	490f      	ldr	r1, [pc, #60]	; (80054a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005464:	fb93 f3f2 	sdiv	r3, r3, r2
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	7b7a      	ldrb	r2, [r7, #13]
 8005474:	4909      	ldr	r1, [pc, #36]	; (800549c <UARTEx_SetNbDataToProcess+0x94>)
 8005476:	5c8a      	ldrb	r2, [r1, r2]
 8005478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800547c:	7b7a      	ldrb	r2, [r7, #13]
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <UARTEx_SetNbDataToProcess+0x98>)
 8005480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005482:	fb93 f3f2 	sdiv	r3, r3, r2
 8005486:	b29a      	uxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	08009e68 	.word	0x08009e68
 80054a0:	08009e70 	.word	0x08009e70

080054a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054b4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80054b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054da:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80054de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4013      	ands	r3, r2
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005544:	b480      	push	{r7}
 8005546:	b09d      	sub	sp, #116	; 0x74
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	78db      	ldrb	r3, [r3, #3]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d81f      	bhi.n	80055b6 <USB_ActivateEndpoint+0x72>
 8005576:	a201      	add	r2, pc, #4	; (adr r2, 800557c <USB_ActivateEndpoint+0x38>)
 8005578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557c:	0800558d 	.word	0x0800558d
 8005580:	080055a9 	.word	0x080055a9
 8005584:	080055bf 	.word	0x080055bf
 8005588:	0800559b 	.word	0x0800559b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800558c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005594:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005598:	e012      	b.n	80055c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800559a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800559e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80055a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055a6:	e00b      	b.n	80055c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80055a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055b4:	e004      	b.n	80055c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80055bc:	e000      	b.n	80055c0 <USB_ActivateEndpoint+0x7c>
      break;
 80055be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	b21b      	sxth	r3, r3
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	b21a      	sxth	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	b21b      	sxth	r3, r3
 8005602:	4313      	orrs	r3, r2
 8005604:	b21b      	sxth	r3, r3
 8005606:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	7b1b      	ldrb	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 8178 	bne.w	8005926 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8084 	beq.w	8005748 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	4413      	add	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	88db      	ldrh	r3, [r3, #6]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	b29b      	uxth	r3, r3
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	827b      	strh	r3, [r7, #18]
 8005682:	8a7b      	ldrh	r3, [r7, #18]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01b      	beq.n	80056c4 <USB_ActivateEndpoint+0x180>
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	823b      	strh	r3, [r7, #16]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	8a3b      	ldrh	r3, [r7, #16]
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d020      	beq.n	800570e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e2:	81bb      	strh	r3, [r7, #12]
 80056e4:	89bb      	ldrh	r3, [r7, #12]
 80056e6:	f083 0320 	eor.w	r3, r3, #32
 80056ea:	81bb      	strh	r3, [r7, #12]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	89bb      	ldrh	r3, [r7, #12]
 80056f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]
 800570c:	e2d5      	b.n	8005cba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	81fb      	strh	r3, [r7, #14]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	89fb      	ldrh	r3, [r7, #14]
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]
 8005746:	e2b8      	b.n	8005cba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	4413      	add	r3, r2
 800575a:	633b      	str	r3, [r7, #48]	; 0x30
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	00da      	lsls	r2, r3, #3
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	4413      	add	r3, r2
 8005766:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	88db      	ldrh	r3, [r3, #6]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	b29b      	uxth	r3, r3
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005786:	b29b      	uxth	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	4413      	add	r3, r2
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	00da      	lsls	r2, r3, #3
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	4413      	add	r3, r2
 800579a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b3e      	cmp	r3, #62	; 0x3e
 80057b6:	d91d      	bls.n	80057f4 <USB_ActivateEndpoint+0x2b0>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	095b      	lsrs	r3, r3, #5
 80057be:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <USB_ActivateEndpoint+0x28e>
 80057cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ce:	3b01      	subs	r3, #1
 80057d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057da:	b29b      	uxth	r3, r3
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	e026      	b.n	8005842 <USB_ActivateEndpoint+0x2fe>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <USB_ActivateEndpoint+0x2ce>
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580a:	b29a      	uxth	r2, r3
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e017      	b.n	8005842 <USB_ActivateEndpoint+0x2fe>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	66bb      	str	r3, [r7, #104]	; 0x68
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <USB_ActivateEndpoint+0x2e8>
 8005826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005828:	3301      	adds	r3, #1
 800582a:	66bb      	str	r3, [r7, #104]	; 0x68
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29a      	uxth	r2, r3
 8005832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005834:	b29b      	uxth	r3, r3
 8005836:	029b      	lsls	r3, r3, #10
 8005838:	b29b      	uxth	r3, r3
 800583a:	4313      	orrs	r3, r2
 800583c:	b29a      	uxth	r2, r3
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01b      	beq.n	8005892 <USB_ActivateEndpoint+0x34e>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	843b      	strh	r3, [r7, #32]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	441a      	add	r2, r3
 800587c:	8c3b      	ldrh	r3, [r7, #32]
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d124      	bne.n	80058e4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	83bb      	strh	r3, [r7, #28]
 80058b2:	8bbb      	ldrh	r3, [r7, #28]
 80058b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058b8:	83bb      	strh	r3, [r7, #28]
 80058ba:	8bbb      	ldrh	r3, [r7, #28]
 80058bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c0:	83bb      	strh	r3, [r7, #28]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	8bbb      	ldrh	r3, [r7, #28]
 80058ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8013      	strh	r3, [r2, #0]
 80058e2:	e1ea      	b.n	8005cba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	83fb      	strh	r3, [r7, #30]
 80058fc:	8bfb      	ldrh	r3, [r7, #30]
 80058fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005902:	83fb      	strh	r3, [r7, #30]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	8bfb      	ldrh	r3, [r7, #30]
 8005910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005920:	b29b      	uxth	r3, r3
 8005922:	8013      	strh	r3, [r2, #0]
 8005924:	e1c9      	b.n	8005cba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	78db      	ldrb	r3, [r3, #3]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d11e      	bne.n	800596c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005944:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	441a      	add	r2, r3
 8005952:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]
 800596a:	e01d      	b.n	80059a8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b8:	4413      	add	r3, r2
 80059ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	00da      	lsls	r2, r3, #3
 80059c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	891b      	ldrh	r3, [r3, #8]
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	657b      	str	r3, [r7, #84]	; 0x54
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ec:	4413      	add	r3, r2
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00da      	lsls	r2, r3, #3
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	4413      	add	r3, r2
 80059fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	895b      	ldrh	r3, [r3, #10]
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 8093 	bne.w	8005b40 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01b      	beq.n	8005a6e <USB_ActivateEndpoint+0x52a>
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005a7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01b      	beq.n	8005abe <USB_ActivateEndpoint+0x57a>
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ad6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ad8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005adc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ade:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ae4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	441a      	add	r2, r3
 8005b28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	8013      	strh	r3, [r2, #0]
 8005b3e:	e0bc      	b.n	8005cba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01d      	beq.n	8005b98 <USB_ActivateEndpoint+0x654>
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ba8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01d      	beq.n	8005bf0 <USB_ActivateEndpoint+0x6ac>
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	78db      	ldrb	r3, [r3, #3]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d024      	beq.n	8005c42 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c16:	f083 0320 	eor.w	r3, r3, #32
 8005c1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]
 8005c40:	e01d      	b.n	8005c7e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005cba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3774      	adds	r7, #116	; 0x74
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop

08005ccc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b08d      	sub	sp, #52	; 0x34
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	7b1b      	ldrb	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 808e 	bne.w	8005dfc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d044      	beq.n	8005d72 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	81bb      	strh	r3, [r7, #12]
 8005cf6:	89bb      	ldrh	r3, [r7, #12]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <USB_DeactivateEndpoint+0x6c>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	817b      	strh	r3, [r7, #10]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4e:	813b      	strh	r3, [r7, #8]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	893b      	ldrh	r3, [r7, #8]
 8005d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	8013      	strh	r3, [r2, #0]
 8005d70:	e192      	b.n	8006098 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	827b      	strh	r3, [r7, #18]
 8005d80:	8a7b      	ldrh	r3, [r7, #18]
 8005d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01b      	beq.n	8005dc2 <USB_DeactivateEndpoint+0xf6>
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da0:	823b      	strh	r3, [r7, #16]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	8a3b      	ldrh	r3, [r7, #16]
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd8:	81fb      	strh	r3, [r7, #14]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	89fb      	ldrh	r3, [r7, #14]
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
 8005dfa:	e14d      	b.n	8006098 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 80a5 	bne.w	8005f50 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	843b      	strh	r3, [r7, #32]
 8005e14:	8c3b      	ldrh	r3, [r7, #32]
 8005e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01b      	beq.n	8005e56 <USB_DeactivateEndpoint+0x18a>
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	83fb      	strh	r3, [r7, #30]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	8bfb      	ldrh	r3, [r7, #30]
 8005e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	83bb      	strh	r3, [r7, #28]
 8005e64:	8bbb      	ldrh	r3, [r7, #28]
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01b      	beq.n	8005ea6 <USB_DeactivateEndpoint+0x1da>
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	837b      	strh	r3, [r7, #26]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	8b7b      	ldrh	r3, [r7, #26]
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	833b      	strh	r3, [r7, #24]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	8b3b      	ldrh	r3, [r7, #24]
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	82fb      	strh	r3, [r7, #22]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	8afb      	ldrh	r3, [r7, #22]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2c:	82bb      	strh	r3, [r7, #20]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	8abb      	ldrh	r3, [r7, #20]
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
 8005f4e:	e0a3      	b.n	8006098 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005f5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <USB_DeactivateEndpoint+0x2d4>
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <USB_DeactivateEndpoint+0x324>
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	853b      	strh	r3, [r7, #40]	; 0x28
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	847b      	strh	r3, [r7, #34]	; 0x22
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3734      	adds	r7, #52	; 0x34
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b0c2      	sub	sp, #264	; 0x108
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060b4:	6018      	str	r0, [r3, #0]
 80060b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 86b7 	bne.w	8006e40 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80060d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d908      	bls.n	8006100 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80060ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060fe:	e007      	b.n	8006110 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	7b1b      	ldrb	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d13a      	bne.n	8006196 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6959      	ldr	r1, [r3, #20]
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	88da      	ldrh	r2, [r3, #6]
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613c:	b29b      	uxth	r3, r3
 800613e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006142:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006146:	6800      	ldr	r0, [r0, #0]
 8006148:	f001 fc98 	bl	8007a7c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	00da      	lsls	r2, r3, #3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4413      	add	r3, r2
 8006182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	f000 be1f 	b.w	8006dd4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	78db      	ldrb	r3, [r3, #3]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	f040 8462 	bne.w	8006a6c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	f240 83df 	bls.w	8006984 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	441a      	add	r2, r3
 800620a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800620e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006216:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800621a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621e:	b29b      	uxth	r3, r3
 8006220:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 81c7 	beq.w	80065f6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	633b      	str	r3, [r7, #48]	; 0x30
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d177      	bne.n	8006374 <USB_EPStartXfer+0x2ce>
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	4413      	add	r3, r2
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	00da      	lsls	r2, r3, #3
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d4:	2b3e      	cmp	r3, #62	; 0x3e
 80062d6:	d921      	bls.n	800631c <USB_EPStartXfer+0x276>
 80062d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <USB_EPStartXfer+0x252>
 80062ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062f2:	3b01      	subs	r3, #1
 80062f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29b      	uxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e050      	b.n	80063be <USB_EPStartXfer+0x318>
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <USB_EPStartXfer+0x294>
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006332:	b29a      	uxth	r2, r3
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e041      	b.n	80063be <USB_EPStartXfer+0x318>
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <USB_EPStartXfer+0x2b4>
 8006350:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006364:	b29b      	uxth	r3, r3
 8006366:	029b      	lsls	r3, r3, #10
 8006368:	b29b      	uxth	r3, r3
 800636a:	4313      	orrs	r3, r2
 800636c:	b29a      	uxth	r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e024      	b.n	80063be <USB_EPStartXfer+0x318>
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d11c      	bne.n	80063be <USB_EPStartXfer+0x318>
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	4413      	add	r3, r2
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
 800639c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	00da      	lsls	r2, r3, #3
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	895b      	ldrh	r3, [r3, #10]
 80063ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6959      	ldr	r1, [r3, #20]
 80063da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f001 fb45 	bl	8007a7c <USB_WritePMA>
            ep->xfer_buff += len;
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	441a      	add	r2, r3
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	429a      	cmp	r2, r3
 800642a:	d90f      	bls.n	800644c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	621a      	str	r2, [r3, #32]
 800644a:	e00e      	b.n	800646a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2200      	movs	r2, #0
 8006468:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d177      	bne.n	800656a <USB_EPStartXfer+0x4c4>
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	4413      	add	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	00da      	lsls	r2, r3, #3
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	4413      	add	r3, r2
 80064b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ca:	2b3e      	cmp	r3, #62	; 0x3e
 80064cc:	d921      	bls.n	8006512 <USB_EPStartXfer+0x46c>
 80064ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USB_EPStartXfer+0x448>
 80064e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e8:	3b01      	subs	r3, #1
 80064ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4313      	orrs	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650a:	b29a      	uxth	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e056      	b.n	80065c0 <USB_EPStartXfer+0x51a>
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <USB_EPStartXfer+0x48a>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29a      	uxth	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e047      	b.n	80065c0 <USB_EPStartXfer+0x51a>
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <USB_EPStartXfer+0x4aa>
 8006546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654a:	3301      	adds	r3, #1
 800654c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800655a:	b29b      	uxth	r3, r3
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	b29b      	uxth	r3, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	b29a      	uxth	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e02a      	b.n	80065c0 <USB_EPStartXfer+0x51a>
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d122      	bne.n	80065c0 <USB_EPStartXfer+0x51a>
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	4413      	add	r3, r2
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	00da      	lsls	r2, r3, #3
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	4413      	add	r3, r2
 80065b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	891b      	ldrh	r3, [r3, #8]
 80065cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6959      	ldr	r1, [r3, #20]
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	f001 fa44 	bl	8007a7c <USB_WritePMA>
 80065f4:	e3ee      	b.n	8006dd4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d177      	bne.n	80066f6 <USB_EPStartXfer+0x650>
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
 8006612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006616:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006626:	4413      	add	r3, r2
 8006628:	64bb      	str	r3, [r7, #72]	; 0x48
 800662a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	00da      	lsls	r2, r3, #3
 8006638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663a:	4413      	add	r3, r2
 800663c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006640:	647b      	str	r3, [r7, #68]	; 0x44
 8006642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800664c:	b29a      	uxth	r2, r3
 800664e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006656:	2b3e      	cmp	r3, #62	; 0x3e
 8006658:	d921      	bls.n	800669e <USB_EPStartXfer+0x5f8>
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <USB_EPStartXfer+0x5d4>
 8006670:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006674:	3b01      	subs	r3, #1
 8006676:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800667a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29b      	uxth	r3, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e056      	b.n	800674c <USB_EPStartXfer+0x6a6>
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <USB_EPStartXfer+0x616>
 80066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e047      	b.n	800674c <USB_EPStartXfer+0x6a6>
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d004      	beq.n	80066dc <USB_EPStartXfer+0x636>
 80066d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066d6:	3301      	adds	r3, #1
 80066d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	029b      	lsls	r3, r3, #10
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4313      	orrs	r3, r2
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e02a      	b.n	800674c <USB_EPStartXfer+0x6a6>
 80066f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d122      	bne.n	800674c <USB_EPStartXfer+0x6a6>
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
 8006712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006726:	4413      	add	r3, r2
 8006728:	653b      	str	r3, [r7, #80]	; 0x50
 800672a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	00da      	lsls	r2, r3, #3
 8006738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800673a:	4413      	add	r3, r2
 800673c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006740:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006746:	b29a      	uxth	r2, r3
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800674c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	891b      	ldrh	r3, [r3, #8]
 8006758:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800675c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6959      	ldr	r1, [r3, #20]
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676c:	b29b      	uxth	r3, r3
 800676e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006772:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006776:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	f001 f97e 	bl	8007a7c <USB_WritePMA>
            ep->xfer_buff += len;
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006790:	441a      	add	r2, r3
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800679e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d90f      	bls.n	80067da <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a1a      	ldr	r2, [r3, #32]
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	621a      	str	r2, [r3, #32]
 80067d8:	e00e      	b.n	80067f8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80067ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	643b      	str	r3, [r7, #64]	; 0x40
 8006804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d177      	bne.n	8006904 <USB_EPStartXfer+0x85e>
 8006814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800682e:	b29b      	uxth	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	4413      	add	r3, r2
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
 8006838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	00da      	lsls	r2, r3, #3
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	4413      	add	r3, r2
 800684a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800684e:	637b      	str	r3, [r7, #52]	; 0x34
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800685a:	b29a      	uxth	r2, r3
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006864:	2b3e      	cmp	r3, #62	; 0x3e
 8006866:	d921      	bls.n	80068ac <USB_EPStartXfer+0x806>
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <USB_EPStartXfer+0x7e2>
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006882:	3b01      	subs	r3, #1
 8006884:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29a      	uxth	r2, r3
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	b29b      	uxth	r3, r3
 8006894:	029b      	lsls	r3, r3, #10
 8006896:	b29b      	uxth	r3, r3
 8006898:	4313      	orrs	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e050      	b.n	800694e <USB_EPStartXfer+0x8a8>
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <USB_EPStartXfer+0x824>
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e041      	b.n	800694e <USB_EPStartXfer+0x8a8>
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <USB_EPStartXfer+0x844>
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	3301      	adds	r3, #1
 80068e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	029b      	lsls	r3, r3, #10
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e024      	b.n	800694e <USB_EPStartXfer+0x8a8>
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d11c      	bne.n	800694e <USB_EPStartXfer+0x8a8>
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006928:	4413      	add	r3, r2
 800692a:	643b      	str	r3, [r7, #64]	; 0x40
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	00da      	lsls	r2, r3, #3
 800693a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693c:	4413      	add	r3, r2
 800693e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006948:	b29a      	uxth	r2, r3
 800694a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	895b      	ldrh	r3, [r3, #10]
 800695a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6959      	ldr	r1, [r3, #20]
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696e:	b29b      	uxth	r3, r3
 8006970:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006974:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006978:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800697c:	6800      	ldr	r0, [r0, #0]
 800697e:	f001 f87d 	bl	8007a7c <USB_WritePMA>
 8006982:	e227      	b.n	8006dd4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a10:	4413      	add	r3, r2
 8006a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	00da      	lsls	r2, r3, #3
 8006a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	891b      	ldrh	r3, [r3, #8]
 8006a42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6959      	ldr	r1, [r3, #20]
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a64:	6800      	ldr	r0, [r0, #0]
 8006a66:	f001 f809 	bl	8007a7c <USB_WritePMA>
 8006a6a:	e1b3      	b.n	8006dd4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	1ad2      	subs	r2, r2, r3
 8006a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80c6 	beq.w	8006c3e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	673b      	str	r3, [r7, #112]	; 0x70
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d177      	bne.n	8006bbe <USB_EPStartXfer+0xb18>
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aee:	4413      	add	r3, r2
 8006af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	00da      	lsls	r2, r3, #3
 8006b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b08:	667b      	str	r3, [r7, #100]	; 0x64
 8006b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b20:	d921      	bls.n	8006b66 <USB_EPStartXfer+0xac0>
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <USB_EPStartXfer+0xa9c>
 8006b38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b62:	801a      	strh	r2, [r3, #0]
 8006b64:	e050      	b.n	8006c08 <USB_EPStartXfer+0xb62>
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <USB_EPStartXfer+0xade>
 8006b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b80:	801a      	strh	r2, [r3, #0]
 8006b82:	e041      	b.n	8006c08 <USB_EPStartXfer+0xb62>
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <USB_EPStartXfer+0xafe>
 8006b9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e024      	b.n	8006c08 <USB_EPStartXfer+0xb62>
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	785b      	ldrb	r3, [r3, #1]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d11c      	bne.n	8006c08 <USB_EPStartXfer+0xb62>
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be2:	4413      	add	r3, r2
 8006be4:	673b      	str	r3, [r7, #112]	; 0x70
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	00da      	lsls	r2, r3, #3
 8006bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	895b      	ldrh	r3, [r3, #10]
 8006c14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6959      	ldr	r1, [r3, #20]
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	f000 ff20 	bl	8007a7c <USB_WritePMA>
 8006c3c:	e0ca      	b.n	8006dd4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d177      	bne.n	8006d3e <USB_EPStartXfer+0xc98>
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c6e:	4413      	add	r3, r2
 8006c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	00da      	lsls	r2, r3, #3
 8006c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c82:	4413      	add	r3, r2
 8006c84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca0:	d921      	bls.n	8006ce6 <USB_EPStartXfer+0xc40>
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <USB_EPStartXfer+0xc1c>
 8006cb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	029b      	lsls	r3, r3, #10
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e05c      	b.n	8006da0 <USB_EPStartXfer+0xcfa>
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <USB_EPStartXfer+0xc5e>
 8006cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e04d      	b.n	8006da0 <USB_EPStartXfer+0xcfa>
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <USB_EPStartXfer+0xc7e>
 8006d1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d1e:	3301      	adds	r3, #1
 8006d20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	029b      	lsls	r3, r3, #10
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e030      	b.n	8006da0 <USB_EPStartXfer+0xcfa>
 8006d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d128      	bne.n	8006da0 <USB_EPStartXfer+0xcfa>
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d72:	4413      	add	r3, r2
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	891b      	ldrh	r3, [r3, #8]
 8006dac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6959      	ldr	r1, [r3, #20]
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	f000 fe54 	bl	8007a7c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfa:	817b      	strh	r3, [r7, #10]
 8006dfc:	897b      	ldrh	r3, [r7, #10]
 8006dfe:	f083 0310 	eor.w	r3, r3, #16
 8006e02:	817b      	strh	r3, [r7, #10]
 8006e04:	897b      	ldrh	r3, [r7, #10]
 8006e06:	f083 0320 	eor.w	r3, r3, #32
 8006e0a:	817b      	strh	r3, [r7, #10]
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	897b      	ldrh	r3, [r7, #10]
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
 8006e3c:	f000 bcde 	b.w	80077fc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	7b1b      	ldrb	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 80bb 	bne.w	8006fc8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d917      	bls.n	8006e9e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	619a      	str	r2, [r3, #24]
 8006e9c:	e00e      	b.n	8006ebc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	00da      	lsls	r2, r3, #3
 8006ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f14:	801a      	strh	r2, [r3, #0]
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f1c:	d924      	bls.n	8006f68 <USB_EPStartXfer+0xec2>
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2c:	f003 031f 	and.w	r3, r3, #31
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <USB_EPStartXfer+0xe98>
 8006f34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	4313      	orrs	r3, r2
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	f000 bc10 	b.w	8007788 <USB_EPStartXfer+0x16e2>
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10c      	bne.n	8006f8a <USB_EPStartXfer+0xee4>
 8006f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	e3fe      	b.n	8007788 <USB_EPStartXfer+0x16e2>
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <USB_EPStartXfer+0xf04>
 8006fa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	029b      	lsls	r3, r3, #10
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	e3df      	b.n	8007788 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	78db      	ldrb	r3, [r3, #3]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	f040 8218 	bne.w	800740a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 809d 	bne.w	8007126 <USB_EPStartXfer+0x1080>
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	00da      	lsls	r2, r3, #3
 8007024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007028:	4413      	add	r3, r2
 800702a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800702e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007032:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b3e      	cmp	r3, #62	; 0x3e
 8007054:	d92b      	bls.n	80070ae <USB_EPStartXfer+0x1008>
 8007056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <USB_EPStartXfer+0xfe0>
 800707c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007080:	3b01      	subs	r3, #1
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	b29b      	uxth	r3, r3
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	b29b      	uxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	e070      	b.n	8007190 <USB_EPStartXfer+0x10ea>
 80070ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10c      	bne.n	80070d8 <USB_EPStartXfer+0x1032>
 80070be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e05b      	b.n	8007190 <USB_EPStartXfer+0x10ea>
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <USB_EPStartXfer+0x1062>
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	3301      	adds	r3, #1
 8007104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29a      	uxth	r2, r3
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007114:	b29b      	uxth	r3, r3
 8007116:	029b      	lsls	r3, r3, #10
 8007118:	b29b      	uxth	r3, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	b29a      	uxth	r2, r3
 800711e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	e034      	b.n	8007190 <USB_EPStartXfer+0x10ea>
 8007126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d12c      	bne.n	8007190 <USB_EPStartXfer+0x10ea>
 8007136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800715a:	4413      	add	r3, r2
 800715c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	00da      	lsls	r2, r3, #3
 800716e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007172:	4413      	add	r3, r2
 8007174:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800717c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	b29a      	uxth	r2, r3
 800718a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800719e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 809d 	bne.w	80072ea <USB_EPStartXfer+0x1244>
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071d4:	4413      	add	r3, r2
 80071d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	00da      	lsls	r2, r3, #3
 80071e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ec:	4413      	add	r3, r2
 80071ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b3e      	cmp	r3, #62	; 0x3e
 8007218:	d92b      	bls.n	8007272 <USB_EPStartXfer+0x11cc>
 800721a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800722c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <USB_EPStartXfer+0x11a4>
 8007240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007244:	3b01      	subs	r3, #1
 8007246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800724a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007256:	b29b      	uxth	r3, r3
 8007258:	029b      	lsls	r3, r3, #10
 800725a:	b29b      	uxth	r3, r3
 800725c:	4313      	orrs	r3, r2
 800725e:	b29b      	uxth	r3, r3
 8007260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007268:	b29a      	uxth	r2, r3
 800726a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	e069      	b.n	8007346 <USB_EPStartXfer+0x12a0>
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10c      	bne.n	800729c <USB_EPStartXfer+0x11f6>
 8007282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007292:	b29a      	uxth	r2, r3
 8007294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e054      	b.n	8007346 <USB_EPStartXfer+0x12a0>
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <USB_EPStartXfer+0x1226>
 80072c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c6:	3301      	adds	r3, #1
 80072c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4313      	orrs	r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e02d      	b.n	8007346 <USB_EPStartXfer+0x12a0>
 80072ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d125      	bne.n	8007346 <USB_EPStartXfer+0x12a0>
 80072fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007308:	b29b      	uxth	r3, r3
 800730a:	461a      	mov	r2, r3
 800730c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007310:	4413      	add	r3, r2
 8007312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	00da      	lsls	r2, r3, #3
 8007324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007328:	4413      	add	r3, r2
 800732a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800732e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007344:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8218 	beq.w	8007788 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007378:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800737c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <USB_EPStartXfer+0x12ea>
 8007384:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10d      	bne.n	80073ac <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007390:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 81f5 	bne.w	8007788 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800739e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 81ee 	bne.w	8007788 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80073f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007404:	b29b      	uxth	r3, r3
 8007406:	8013      	strh	r3, [r2, #0]
 8007408:	e1be      	b.n	8007788 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	78db      	ldrb	r3, [r3, #3]
 8007416:	2b01      	cmp	r3, #1
 8007418:	f040 81b4 	bne.w	8007784 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800741c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	429a      	cmp	r2, r3
 8007436:	d917      	bls.n	8007468 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699a      	ldr	r2, [r3, #24]
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	619a      	str	r2, [r3, #24]
 8007466:	e00e      	b.n	8007486 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f040 8085 	bne.w	80075a2 <USB_EPStartXfer+0x14fc>
 8007498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	461a      	mov	r2, r3
 80074b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074bc:	4413      	add	r3, r2
 80074be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	00da      	lsls	r2, r3, #3
 80074d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80074d4:	4413      	add	r3, r2
 80074d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	2b3e      	cmp	r3, #62	; 0x3e
 80074f8:	d923      	bls.n	8007542 <USB_EPStartXfer+0x149c>
 80074fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	f003 031f 	and.w	r3, r3, #31
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USB_EPStartXfer+0x1474>
 8007510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007514:	3b01      	subs	r3, #1
 8007516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800751a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29a      	uxth	r2, r3
 8007522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007526:	b29b      	uxth	r3, r3
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	b29b      	uxth	r3, r3
 800752c:	4313      	orrs	r3, r2
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007538:	b29a      	uxth	r2, r3
 800753a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	e060      	b.n	8007604 <USB_EPStartXfer+0x155e>
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10c      	bne.n	8007564 <USB_EPStartXfer+0x14be>
 800754a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755a:	b29a      	uxth	r2, r3
 800755c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	e04f      	b.n	8007604 <USB_EPStartXfer+0x155e>
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007568:	085b      	lsrs	r3, r3, #1
 800756a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <USB_EPStartXfer+0x14de>
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	3301      	adds	r3, #1
 8007580:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29a      	uxth	r2, r3
 800758c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007590:	b29b      	uxth	r3, r3
 8007592:	029b      	lsls	r3, r3, #10
 8007594:	b29b      	uxth	r3, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e030      	b.n	8007604 <USB_EPStartXfer+0x155e>
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d128      	bne.n	8007604 <USB_EPStartXfer+0x155e>
 80075b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	461a      	mov	r2, r3
 80075d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075d6:	4413      	add	r3, r2
 80075d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	00da      	lsls	r2, r3, #3
 80075ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ee:	4413      	add	r3, r2
 80075f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 8085 	bne.w	800772e <USB_EPStartXfer+0x1688>
 8007624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007640:	b29b      	uxth	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007648:	4413      	add	r3, r2
 800764a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800764e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	00da      	lsls	r2, r3, #3
 800765c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007660:	4413      	add	r3, r2
 8007662:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800766a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	2b3e      	cmp	r3, #62	; 0x3e
 8007684:	d923      	bls.n	80076ce <USB_EPStartXfer+0x1628>
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USB_EPStartXfer+0x1600>
 800769c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a0:	3b01      	subs	r3, #1
 80076a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	029b      	lsls	r3, r3, #10
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ca:	801a      	strh	r2, [r3, #0]
 80076cc:	e05c      	b.n	8007788 <USB_EPStartXfer+0x16e2>
 80076ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10c      	bne.n	80076f0 <USB_EPStartXfer+0x164a>
 80076d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e04b      	b.n	8007788 <USB_EPStartXfer+0x16e2>
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <USB_EPStartXfer+0x166a>
 8007706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770a:	3301      	adds	r3, #1
 800770c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29a      	uxth	r2, r3
 8007718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800771c:	b29b      	uxth	r3, r3
 800771e:	029b      	lsls	r3, r3, #10
 8007720:	b29b      	uxth	r3, r3
 8007722:	4313      	orrs	r3, r2
 8007724:	b29a      	uxth	r2, r3
 8007726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	e02c      	b.n	8007788 <USB_EPStartXfer+0x16e2>
 800772e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d124      	bne.n	8007788 <USB_EPStartXfer+0x16e2>
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774c:	b29b      	uxth	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007754:	4413      	add	r3, r2
 8007756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	00da      	lsls	r2, r3, #3
 8007768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800776c:	4413      	add	r3, r2
 800776e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777a:	b29a      	uxth	r2, r3
 800777c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	e001      	b.n	8007788 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e03a      	b.n	80077fe <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d020      	beq.n	800785c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007830:	81bb      	strh	r3, [r7, #12]
 8007832:	89bb      	ldrh	r3, [r7, #12]
 8007834:	f083 0310 	eor.w	r3, r3, #16
 8007838:	81bb      	strh	r3, [r7, #12]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	441a      	add	r2, r3
 8007844:	89bb      	ldrh	r3, [r7, #12]
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]
 800785a:	e01f      	b.n	800789c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	81fb      	strh	r3, [r7, #14]
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800787a:	81fb      	strh	r3, [r7, #14]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	89fb      	ldrh	r3, [r7, #14]
 8007888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800788c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007898:	b29b      	uxth	r3, r3
 800789a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b087      	sub	sp, #28
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	7b1b      	ldrb	r3, [r3, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 809d 	bne.w	80079f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d04c      	beq.n	8007960 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	823b      	strh	r3, [r7, #16]
 80078d4:	8a3b      	ldrh	r3, [r7, #16]
 80078d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01b      	beq.n	8007916 <USB_EPClearStall+0x6c>
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f4:	81fb      	strh	r3, [r7, #14]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	89fb      	ldrh	r3, [r7, #14]
 8007902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007912:	b29b      	uxth	r3, r3
 8007914:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	78db      	ldrb	r3, [r3, #3]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d06c      	beq.n	80079f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007934:	81bb      	strh	r3, [r7, #12]
 8007936:	89bb      	ldrh	r3, [r7, #12]
 8007938:	f083 0320 	eor.w	r3, r3, #32
 800793c:	81bb      	strh	r3, [r7, #12]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	441a      	add	r2, r3
 8007948:	89bb      	ldrh	r3, [r7, #12]
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]
 800795e:	e04b      	b.n	80079f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	82fb      	strh	r3, [r7, #22]
 800796e:	8afb      	ldrh	r3, [r7, #22]
 8007970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01b      	beq.n	80079b0 <USB_EPClearStall+0x106>
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798e:	82bb      	strh	r3, [r7, #20]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	441a      	add	r2, r3
 800799a:	8abb      	ldrh	r3, [r7, #20]
 800799c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	827b      	strh	r3, [r7, #18]
 80079c8:	8a7b      	ldrh	r3, [r7, #18]
 80079ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079ce:	827b      	strh	r3, [r7, #18]
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079d6:	827b      	strh	r3, [r7, #18]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	8a7b      	ldrh	r3, [r7, #18]
 80079e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a12:	78fb      	ldrb	r3, [r7, #3]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d103      	bne.n	8007a20 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2280      	movs	r2, #128	; 0x80
 8007a1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b083      	sub	sp, #12
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b08b      	sub	sp, #44	; 0x2c
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	80fb      	strh	r3, [r7, #6]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007a92:	88bb      	ldrh	r3, [r7, #4]
 8007a94:	3301      	adds	r3, #1
 8007a96:	085b      	lsrs	r3, r3, #1
 8007a98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab2:	e01b      	b.n	8007aec <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	3301      	adds	r3, #1
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	b21a      	sxth	r2, r3
 8007ac4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	b21b      	sxth	r3, r3
 8007acc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	8a7a      	ldrh	r2, [r7, #18]
 8007ad2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e0      	bne.n	8007ab4 <USB_WritePMA+0x38>
  }
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	372c      	adds	r7, #44	; 0x2c
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b08b      	sub	sp, #44	; 0x2c
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	460b      	mov	r3, r1
 8007b10:	80fb      	strh	r3, [r7, #6]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	085b      	lsrs	r3, r3, #1
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
 8007b36:	e018      	b.n	8007b6a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	3302      	adds	r3, #2
 8007b44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3301      	adds	r3, #1
 8007b52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	3301      	adds	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	3b01      	subs	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e3      	bne.n	8007b38 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b70:	88bb      	ldrh	r3, [r7, #4]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d007      	beq.n	8007b8c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	701a      	strb	r2, [r3, #0]
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	372c      	adds	r7, #44	; 0x2c
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ba4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ba8:	f002 f8a6 	bl	8009cf8 <USBD_static_malloc>
 8007bac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d105      	bne.n	8007bc0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e066      	b.n	8007c8e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7c1b      	ldrb	r3, [r3, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d119      	bne.n	8007c04 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	2181      	movs	r1, #129	; 0x81
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 ff34 	bl	8009a46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be8:	2202      	movs	r2, #2
 8007bea:	2101      	movs	r1, #1
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 ff2a 	bl	8009a46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2210      	movs	r2, #16
 8007bfe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c02:	e016      	b.n	8007c32 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c04:	2340      	movs	r3, #64	; 0x40
 8007c06:	2202      	movs	r2, #2
 8007c08:	2181      	movs	r1, #129	; 0x81
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 ff1b 	bl	8009a46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c16:	2340      	movs	r3, #64	; 0x40
 8007c18:	2202      	movs	r2, #2
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 ff12 	bl	8009a46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c32:	2308      	movs	r3, #8
 8007c34:	2203      	movs	r2, #3
 8007c36:	2182      	movs	r1, #130	; 0x82
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 ff04 	bl	8009a46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7c1b      	ldrb	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c72:	2101      	movs	r1, #1
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 ffd5 	bl	8009c24 <USBD_LL_PrepareReceive>
 8007c7a:	e007      	b.n	8007c8c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c82:	2340      	movs	r3, #64	; 0x40
 8007c84:	2101      	movs	r1, #1
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 ffcc 	bl	8009c24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ca2:	2181      	movs	r1, #129	; 0x81
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 fef4 	bl	8009a92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 feed 	bl	8009a92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007cc0:	2182      	movs	r1, #130	; 0x82
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fee5 	bl	8009a92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f002 f80e 	bl	8009d14 <USBD_static_free>
    pdev->pClassData = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e0af      	b.n	8007e94 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d03f      	beq.n	8007dc0 <USBD_CDC_Setup+0xb4>
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	f040 809f 	bne.w	8007e84 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	88db      	ldrh	r3, [r3, #6]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d02e      	beq.n	8007dac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	da16      	bge.n	8007d86 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007d64:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	88d2      	ldrh	r2, [r2, #6]
 8007d6a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	88db      	ldrh	r3, [r3, #6]
 8007d70:	2b07      	cmp	r3, #7
 8007d72:	bf28      	it	cs
 8007d74:	2307      	movcs	r3, #7
 8007d76:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	89fa      	ldrh	r2, [r7, #14]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 fa9f 	bl	80092c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007d84:	e085      	b.n	8007e92 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	785a      	ldrb	r2, [r3, #1]
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	88db      	ldrh	r3, [r3, #6]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d9c:	6939      	ldr	r1, [r7, #16]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fab8 	bl	800931a <USBD_CtlPrepareRx>
      break;
 8007daa:	e072      	b.n	8007e92 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	7850      	ldrb	r0, [r2, #1]
 8007db8:	2200      	movs	r2, #0
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	4798      	blx	r3
      break;
 8007dbe:	e068      	b.n	8007e92 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d852      	bhi.n	8007e6e <USBD_CDC_Setup+0x162>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <USBD_CDC_Setup+0xc4>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007e01 	.word	0x08007e01
 8007dd4:	08007e7d 	.word	0x08007e7d
 8007dd8:	08007e6f 	.word	0x08007e6f
 8007ddc:	08007e6f 	.word	0x08007e6f
 8007de0:	08007e6f 	.word	0x08007e6f
 8007de4:	08007e6f 	.word	0x08007e6f
 8007de8:	08007e6f 	.word	0x08007e6f
 8007dec:	08007e6f 	.word	0x08007e6f
 8007df0:	08007e6f 	.word	0x08007e6f
 8007df4:	08007e6f 	.word	0x08007e6f
 8007df8:	08007e2b 	.word	0x08007e2b
 8007dfc:	08007e55 	.word	0x08007e55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d107      	bne.n	8007e1c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e0c:	f107 030a 	add.w	r3, r7, #10
 8007e10:	2202      	movs	r2, #2
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 fa54 	bl	80092c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e1a:	e032      	b.n	8007e82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 f9de 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e24:	2303      	movs	r3, #3
 8007e26:	75fb      	strb	r3, [r7, #23]
          break;
 8007e28:	e02b      	b.n	8007e82 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d107      	bne.n	8007e46 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e36:	f107 030d 	add.w	r3, r7, #13
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 fa3f 	bl	80092c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e44:	e01d      	b.n	8007e82 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 f9c9 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	75fb      	strb	r3, [r7, #23]
          break;
 8007e52:	e016      	b.n	8007e82 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d00f      	beq.n	8007e80 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 f9bc 	bl	80091e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e6c:	e008      	b.n	8007e80 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f9b5 	bl	80091e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7a:	e002      	b.n	8007e82 <USBD_CDC_Setup+0x176>
          break;
 8007e7c:	bf00      	nop
 8007e7e:	e008      	b.n	8007e92 <USBD_CDC_Setup+0x186>
          break;
 8007e80:	bf00      	nop
      }
      break;
 8007e82:	e006      	b.n	8007e92 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 f9aa 	bl	80091e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e90:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e04f      	b.n	8007f5e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d029      	beq.n	8007f30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	3318      	adds	r3, #24
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	78f9      	ldrb	r1, [r7, #3]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	4403      	add	r3, r0
 8007efc:	3320      	adds	r3, #32
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f04:	fb01 f303 	mul.w	r3, r1, r3
 8007f08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d110      	bne.n	8007f30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3318      	adds	r3, #24
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f22:	78f9      	ldrb	r1, [r7, #3]
 8007f24:	2300      	movs	r3, #0
 8007f26:	2200      	movs	r2, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fe5a 	bl	8009be2 <USBD_LL_Transmit>
 8007f2e:	e015      	b.n	8007f5c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e015      	b.n	8007fb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fe6a 	bl	8009c66 <USBD_LL_GetRxDataSize>
 8007f92:	4602      	mov	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e01b      	b.n	800800e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d015      	beq.n	800800c <USBD_CDC_EP0_RxReady+0x50>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fe6:	2bff      	cmp	r3, #255	; 0xff
 8007fe8:	d010      	beq.n	800800c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007ff8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008000:	b292      	uxth	r2, r2
 8008002:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	22ff      	movs	r2, #255	; 0xff
 8008008:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2243      	movs	r2, #67	; 0x43
 8008024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20000094 	.word	0x20000094

08008038 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2243      	movs	r2, #67	; 0x43
 8008044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008046:	4b03      	ldr	r3, [pc, #12]	; (8008054 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	20000050 	.word	0x20000050

08008058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2243      	movs	r2, #67	; 0x43
 8008064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008066:	4b03      	ldr	r3, [pc, #12]	; (8008074 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	200000d8 	.word	0x200000d8

08008078 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	220a      	movs	r2, #10
 8008084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008086:	4b03      	ldr	r3, [pc, #12]	; (8008094 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	2000000c 	.word	0x2000000c

08008098 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e004      	b.n	80080b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b087      	sub	sp, #28
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80080dc:	2303      	movs	r3, #3
 80080de:	e008      	b.n	80080f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080fe:	b480      	push	{r7}
 8008100:	b085      	sub	sp, #20
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800810e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	e004      	b.n	8008124 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800813e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800814a:	2303      	movs	r3, #3
 800814c:	e016      	b.n	800817c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800815c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008160:	2101      	movs	r1, #1
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 fd5e 	bl	8009c24 <USBD_LL_PrepareReceive>
 8008168:	e007      	b.n	800817a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008170:	2340      	movs	r3, #64	; 0x40
 8008172:	2101      	movs	r1, #1
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 fd55 	bl	8009c24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e01f      	b.n	80081dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	79fa      	ldrb	r2, [r7, #7]
 80081ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f001 fbbd 	bl	8009950 <USBD_LL_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e016      	b.n	800822a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f107 020e 	add.w	r2, r7, #14
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fbe8 	bl	8009a10 <USBD_LL_Start>
 8008240:	4603      	mov	r3, r0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	4611      	mov	r1, r2
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
  }

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 ff46 	bl	800916c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	2b02      	cmp	r3, #2
 8008302:	d01a      	beq.n	800833a <USBD_LL_SetupStage+0x72>
 8008304:	2b02      	cmp	r3, #2
 8008306:	d822      	bhi.n	800834e <USBD_LL_SetupStage+0x86>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <USBD_LL_SetupStage+0x4a>
 800830c:	2b01      	cmp	r3, #1
 800830e:	d00a      	beq.n	8008326 <USBD_LL_SetupStage+0x5e>
 8008310:	e01d      	b.n	800834e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f9ee 	bl	80086fc <USBD_StdDevReq>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e020      	b.n	8008368 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa52 	bl	80087d8 <USBD_StdItfReq>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
      break;
 8008338:	e016      	b.n	8008368 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa91 	bl	800886a <USBD_StdEPReq>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]
      break;
 800834c:	e00c      	b.n	8008368 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008358:	b2db      	uxtb	r3, r3
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fbb7 	bl	8009ad0 <USBD_LL_StallEP>
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
      break;
 8008366:	bf00      	nop
  }

  return ret;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	460b      	mov	r3, r1
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d138      	bne.n	80083f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800838c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008394:	2b03      	cmp	r3, #3
 8008396:	d14a      	bne.n	800842e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d913      	bls.n	80083cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	1ad2      	subs	r2, r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bf28      	it	cs
 80083be:	4613      	movcs	r3, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 ffc5 	bl	8009354 <USBD_CtlContinueRx>
 80083ca:	e030      	b.n	800842e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d10b      	bne.n	80083f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 ffc0 	bl	8009376 <USBD_CtlSendStatus>
 80083f6:	e01a      	b.n	800842e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b03      	cmp	r3, #3
 8008402:	d114      	bne.n	800842e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	4611      	mov	r1, r2
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	4798      	blx	r3
 8008420:	4603      	mov	r3, r0
 8008422:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	e000      	b.n	8008430 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	460b      	mov	r3, r1
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d16b      	bne.n	8008524 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3314      	adds	r3, #20
 8008450:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008458:	2b02      	cmp	r3, #2
 800845a:	d156      	bne.n	800850a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	429a      	cmp	r2, r3
 8008466:	d914      	bls.n	8008492 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	1ad2      	subs	r2, r2, r3
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	461a      	mov	r2, r3
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 ff3a 	bl	80092f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008484:	2300      	movs	r3, #0
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 fbca 	bl	8009c24 <USBD_LL_PrepareReceive>
 8008490:	e03b      	b.n	800850a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	429a      	cmp	r2, r3
 800849c:	d11c      	bne.n	80084d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d316      	bcc.n	80084d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d20f      	bcs.n	80084d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 ff1b 	bl	80092f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fba7 	bl	8009c24 <USBD_LL_PrepareReceive>
 80084d6:	e018      	b.n	800850a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d10b      	bne.n	80084fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 fae6 	bl	8009ad0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 ff49 	bl	800939c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008510:	2b01      	cmp	r3, #1
 8008512:	d122      	bne.n	800855a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fe98 	bl	800824a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008522:	e01a      	b.n	800855a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b03      	cmp	r3, #3
 800852e:	d114      	bne.n	800855a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	7afa      	ldrb	r2, [r7, #11]
 8008546:	4611      	mov	r1, r2
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	4798      	blx	r3
 800854c:	4603      	mov	r3, r0
 800854e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	e000      	b.n	800855c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008594:	2303      	movs	r3, #3
 8008596:	e02f      	b.n	80085f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	4611      	mov	r1, r2
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085c2:	2340      	movs	r3, #64	; 0x40
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fa3c 	bl	8009a46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2240      	movs	r2, #64	; 0x40
 80085da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	2200      	movs	r2, #0
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 fa2e 	bl	8009a46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2240      	movs	r2, #64	; 0x40
 80085f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862e:	b2da      	uxtb	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2204      	movs	r2, #4
 800863a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b04      	cmp	r3, #4
 800865e:	d106      	bne.n	800866e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008666:	b2da      	uxtb	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800868e:	2303      	movs	r3, #3
 8008690:	e012      	b.n	80086b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b03      	cmp	r3, #3
 800869c:	d10b      	bne.n	80086b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	3301      	adds	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086de:	8a3b      	ldrh	r3, [r7, #16]
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	b21a      	sxth	r2, r3
 80086e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b21b      	sxth	r3, r3
 80086ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086ee:	89fb      	ldrh	r3, [r7, #14]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d005      	beq.n	8008722 <USBD_StdDevReq+0x26>
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d853      	bhi.n	80087c2 <USBD_StdDevReq+0xc6>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <USBD_StdDevReq+0x3a>
 800871e:	2b20      	cmp	r3, #32
 8008720:	d14f      	bne.n	80087c2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	4798      	blx	r3
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
      break;
 8008734:	e04a      	b.n	80087cc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b09      	cmp	r3, #9
 800873c:	d83b      	bhi.n	80087b6 <USBD_StdDevReq+0xba>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USBD_StdDevReq+0x48>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008799 	.word	0x08008799
 8008748:	080087ad 	.word	0x080087ad
 800874c:	080087b7 	.word	0x080087b7
 8008750:	080087a3 	.word	0x080087a3
 8008754:	080087b7 	.word	0x080087b7
 8008758:	08008777 	.word	0x08008777
 800875c:	0800876d 	.word	0x0800876d
 8008760:	080087b7 	.word	0x080087b7
 8008764:	0800878f 	.word	0x0800878f
 8008768:	08008781 	.word	0x08008781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f9de 	bl	8008b30 <USBD_GetDescriptor>
          break;
 8008774:	e024      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb6d 	bl	8008e58 <USBD_SetAddress>
          break;
 800877e:	e01f      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbac 	bl	8008ee0 <USBD_SetConfig>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
          break;
 800878c:	e018      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fc4b 	bl	800902c <USBD_GetConfig>
          break;
 8008796:	e013      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc7c 	bl	8009098 <USBD_GetStatus>
          break;
 80087a0:	e00e      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fcab 	bl	8009100 <USBD_SetFeature>
          break;
 80087aa:	e009      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fcba 	bl	8009128 <USBD_ClrFeature>
          break;
 80087b4:	e004      	b.n	80087c0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fd11 	bl	80091e0 <USBD_CtlError>
          break;
 80087be:	bf00      	nop
      }
      break;
 80087c0:	e004      	b.n	80087cc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fd0b 	bl	80091e0 <USBD_CtlError>
      break;
 80087ca:	bf00      	nop
  }

  return ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop

080087d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d005      	beq.n	80087fe <USBD_StdItfReq+0x26>
 80087f2:	2b40      	cmp	r3, #64	; 0x40
 80087f4:	d82f      	bhi.n	8008856 <USBD_StdItfReq+0x7e>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <USBD_StdItfReq+0x26>
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d12b      	bne.n	8008856 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	b2db      	uxtb	r3, r3
 8008806:	3b01      	subs	r3, #1
 8008808:	2b02      	cmp	r3, #2
 800880a:	d81d      	bhi.n	8008848 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	889b      	ldrh	r3, [r3, #4]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	d813      	bhi.n	800883e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	88db      	ldrh	r3, [r3, #6]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d110      	bne.n	8008852 <USBD_StdItfReq+0x7a>
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10d      	bne.n	8008852 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fd9d 	bl	8009376 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800883c:	e009      	b.n	8008852 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fccd 	bl	80091e0 <USBD_CtlError>
          break;
 8008846:	e004      	b.n	8008852 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcc8 	bl	80091e0 <USBD_CtlError>
          break;
 8008850:	e000      	b.n	8008854 <USBD_StdItfReq+0x7c>
          break;
 8008852:	bf00      	nop
      }
      break;
 8008854:	e004      	b.n	8008860 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fcc1 	bl	80091e0 <USBD_CtlError>
      break;
 800885e:	bf00      	nop
  }

  return ret;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	889b      	ldrh	r3, [r3, #4]
 800887c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d007      	beq.n	800889a <USBD_StdEPReq+0x30>
 800888a:	2b40      	cmp	r3, #64	; 0x40
 800888c:	f200 8145 	bhi.w	8008b1a <USBD_StdEPReq+0x2b0>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00c      	beq.n	80088ae <USBD_StdEPReq+0x44>
 8008894:	2b20      	cmp	r3, #32
 8008896:	f040 8140 	bne.w	8008b1a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e13a      	b.n	8008b24 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d007      	beq.n	80088c6 <USBD_StdEPReq+0x5c>
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	f300 8129 	bgt.w	8008b0e <USBD_StdEPReq+0x2a4>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d07f      	beq.n	80089c0 <USBD_StdEPReq+0x156>
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d03c      	beq.n	800893e <USBD_StdEPReq+0xd4>
 80088c4:	e123      	b.n	8008b0e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d002      	beq.n	80088d8 <USBD_StdEPReq+0x6e>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d016      	beq.n	8008904 <USBD_StdEPReq+0x9a>
 80088d6:	e02c      	b.n	8008932 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <USBD_StdEPReq+0x90>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b80      	cmp	r3, #128	; 0x80
 80088e2:	d00a      	beq.n	80088fa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f8f1 	bl	8009ad0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ee:	2180      	movs	r1, #128	; 0x80
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f8ed 	bl	8009ad0 <USBD_LL_StallEP>
 80088f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088f8:	e020      	b.n	800893c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc6f 	bl	80091e0 <USBD_CtlError>
              break;
 8008902:	e01b      	b.n	800893c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	885b      	ldrh	r3, [r3, #2]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10e      	bne.n	800892a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <USBD_StdEPReq+0xc0>
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b80      	cmp	r3, #128	; 0x80
 8008916:	d008      	beq.n	800892a <USBD_StdEPReq+0xc0>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d104      	bne.n	800892a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 f8d3 	bl	8009ad0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fd23 	bl	8009376 <USBD_CtlSendStatus>

              break;
 8008930:	e004      	b.n	800893c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc53 	bl	80091e0 <USBD_CtlError>
              break;
 800893a:	bf00      	nop
          }
          break;
 800893c:	e0ec      	b.n	8008b18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d002      	beq.n	8008950 <USBD_StdEPReq+0xe6>
 800894a:	2b03      	cmp	r3, #3
 800894c:	d016      	beq.n	800897c <USBD_StdEPReq+0x112>
 800894e:	e030      	b.n	80089b2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00d      	beq.n	8008972 <USBD_StdEPReq+0x108>
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b80      	cmp	r3, #128	; 0x80
 800895a:	d00a      	beq.n	8008972 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f8b5 	bl	8009ad0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008966:	2180      	movs	r1, #128	; 0x80
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 f8b1 	bl	8009ad0 <USBD_LL_StallEP>
 800896e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008970:	e025      	b.n	80089be <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc33 	bl	80091e0 <USBD_CtlError>
              break;
 800897a:	e020      	b.n	80089be <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	885b      	ldrh	r3, [r3, #2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d11b      	bne.n	80089bc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 f8bb 	bl	8009b0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fcec 	bl	8009376 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089b0:	e004      	b.n	80089bc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fc13 	bl	80091e0 <USBD_CtlError>
              break;
 80089ba:	e000      	b.n	80089be <USBD_StdEPReq+0x154>
              break;
 80089bc:	bf00      	nop
          }
          break;
 80089be:	e0ab      	b.n	8008b18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d002      	beq.n	80089d2 <USBD_StdEPReq+0x168>
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d032      	beq.n	8008a36 <USBD_StdEPReq+0x1cc>
 80089d0:	e097      	b.n	8008b02 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <USBD_StdEPReq+0x17e>
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b80      	cmp	r3, #128	; 0x80
 80089dc:	d004      	beq.n	80089e8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fbfd 	bl	80091e0 <USBD_CtlError>
                break;
 80089e6:	e091      	b.n	8008b0c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da0b      	bge.n	8008a08 <USBD_StdEPReq+0x19e>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	3310      	adds	r3, #16
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	e00b      	b.n	8008a20 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3304      	adds	r3, #4
 8008a20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc47 	bl	80092c2 <USBD_CtlSendData>
              break;
 8008a34:	e06a      	b.n	8008b0c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da11      	bge.n	8008a62 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3324      	adds	r3, #36	; 0x24
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d117      	bne.n	8008a88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbc0 	bl	80091e0 <USBD_CtlError>
                  break;
 8008a60:	e054      	b.n	8008b0c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	f003 020f 	and.w	r2, r3, #15
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	440b      	add	r3, r1
 8008a74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fbad 	bl	80091e0 <USBD_CtlError>
                  break;
 8008a86:	e041      	b.n	8008b0c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0b      	bge.n	8008aa8 <USBD_StdEPReq+0x23e>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	3310      	adds	r3, #16
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	e00b      	b.n	8008ac0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	3304      	adds	r3, #4
 8008ac0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <USBD_StdEPReq+0x264>
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b80      	cmp	r3, #128	; 0x80
 8008acc:	d103      	bne.n	8008ad6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e00e      	b.n	8008af4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f836 	bl	8009b4c <USBD_LL_IsStallEP>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e002      	b.n	8008af4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2202      	movs	r2, #2
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fbe1 	bl	80092c2 <USBD_CtlSendData>
              break;
 8008b00:	e004      	b.n	8008b0c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb6b 	bl	80091e0 <USBD_CtlError>
              break;
 8008b0a:	bf00      	nop
          }
          break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb65 	bl	80091e0 <USBD_CtlError>
          break;
 8008b16:	bf00      	nop
      }
      break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb5f 	bl	80091e0 <USBD_CtlError>
      break;
 8008b22:	bf00      	nop
  }

  return ret;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b0e      	cmp	r3, #14
 8008b52:	f200 8152 	bhi.w	8008dfa <USBD_GetDescriptor+0x2ca>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBD_GetDescriptor+0x2c>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008bcd 	.word	0x08008bcd
 8008b60:	08008be5 	.word	0x08008be5
 8008b64:	08008c25 	.word	0x08008c25
 8008b68:	08008dfb 	.word	0x08008dfb
 8008b6c:	08008dfb 	.word	0x08008dfb
 8008b70:	08008d9b 	.word	0x08008d9b
 8008b74:	08008dc7 	.word	0x08008dc7
 8008b78:	08008dfb 	.word	0x08008dfb
 8008b7c:	08008dfb 	.word	0x08008dfb
 8008b80:	08008dfb 	.word	0x08008dfb
 8008b84:	08008dfb 	.word	0x08008dfb
 8008b88:	08008dfb 	.word	0x08008dfb
 8008b8c:	08008dfb 	.word	0x08008dfb
 8008b90:	08008dfb 	.word	0x08008dfb
 8008b94:	08008b99 	.word	0x08008b99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	7c12      	ldrb	r2, [r2, #16]
 8008bb0:	f107 0108 	add.w	r1, r7, #8
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bba:	e126      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb0e 	bl	80091e0 <USBD_CtlError>
        err++;
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008bca:	e11e      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
      break;
 8008be2:	e112      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7c1b      	ldrb	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10d      	bne.n	8008c08 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	f107 0208 	add.w	r2, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c06:	e100      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	f107 0208 	add.w	r2, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	2202      	movs	r2, #2
 8008c20:	701a      	strb	r2, [r3, #0]
      break;
 8008c22:	e0f2      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	f200 80ac 	bhi.w	8008d88 <USBD_GetDescriptor+0x258>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <USBD_GetDescriptor+0x108>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c51 	.word	0x08008c51
 8008c3c:	08008c85 	.word	0x08008c85
 8008c40:	08008cb9 	.word	0x08008cb9
 8008c44:	08008ced 	.word	0x08008ced
 8008c48:	08008d21 	.word	0x08008d21
 8008c4c:	08008d55 	.word	0x08008d55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c72:	e091      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fab2 	bl	80091e0 <USBD_CtlError>
            err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
          break;
 8008c82:	e089      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ca6:	e077      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa98 	bl	80091e0 <USBD_CtlError>
            err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cb6:	e06f      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cda:	e05d      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa7e 	bl	80091e0 <USBD_CtlError>
            err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cea:	e055      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0e:	e043      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa64 	bl	80091e0 <USBD_CtlError>
            err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d1e:	e03b      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d42:	e029      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa4a 	bl	80091e0 <USBD_CtlError>
            err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
          break;
 8008d52:	e021      	b.n	8008d98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7c12      	ldrb	r2, [r2, #16]
 8008d6c:	f107 0108 	add.w	r1, r7, #8
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
 8008d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d76:	e00f      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa30 	bl	80091e0 <USBD_CtlError>
            err++;
 8008d80:	7afb      	ldrb	r3, [r7, #11]
 8008d82:	3301      	adds	r3, #1
 8008d84:	72fb      	strb	r3, [r7, #11]
          break;
 8008d86:	e007      	b.n	8008d98 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa28 	bl	80091e0 <USBD_CtlError>
          err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d96:	bf00      	nop
      }
      break;
 8008d98:	e037      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7c1b      	ldrb	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	4610      	mov	r0, r2
 8008db0:	4798      	blx	r3
 8008db2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008db4:	e029      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fa11 	bl	80091e0 <USBD_CtlError>
        err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc4:	e021      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7c1b      	ldrb	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10d      	bne.n	8008dea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f107 0208 	add.w	r2, r7, #8
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4798      	blx	r3
 8008dde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	2207      	movs	r2, #7
 8008de6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008de8:	e00f      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9f7 	bl	80091e0 <USBD_CtlError>
        err++;
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	3301      	adds	r3, #1
 8008df6:	72fb      	strb	r3, [r7, #11]
      break;
 8008df8:	e007      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f9ef 	bl	80091e0 <USBD_CtlError>
      err++;
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	3301      	adds	r3, #1
 8008e06:	72fb      	strb	r3, [r7, #11]
      break;
 8008e08:	bf00      	nop
  }

  if (err != 0U)
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11e      	bne.n	8008e4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	88db      	ldrh	r3, [r3, #6]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d016      	beq.n	8008e46 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008e18:	893b      	ldrh	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88da      	ldrh	r2, [r3, #6]
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	bf28      	it	cs
 8008e28:	4613      	movcs	r3, r2
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	461a      	mov	r2, r3
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa44 	bl	80092c2 <USBD_CtlSendData>
 8008e3a:	e009      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f9ce 	bl	80091e0 <USBD_CtlError>
 8008e44:	e004      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa95 	bl	8009376 <USBD_CtlSendStatus>
 8008e4c:	e000      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    return;
 8008e4e:	bf00      	nop
  }
}
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop

08008e58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	889b      	ldrh	r3, [r3, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d131      	bne.n	8008ece <USBD_SetAddress+0x76>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d12d      	bne.n	8008ece <USBD_SetAddress+0x76>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	2b7f      	cmp	r3, #127	; 0x7f
 8008e78:	d829      	bhi.n	8008ece <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d104      	bne.n	8008e9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f9a3 	bl	80091e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9a:	e01d      	b.n	8008ed8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ea0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fe7b 	bl	8009ba4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa61 	bl	8009376 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	e009      	b.n	8008ed8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ecc:	e004      	b.n	8008ed8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f985 	bl	80091e0 <USBD_CtlError>
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	885b      	ldrh	r3, [r3, #2]
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	4b4c      	ldr	r3, [pc, #304]	; (8009028 <USBD_SetConfig+0x148>)
 8008ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ef8:	4b4b      	ldr	r3, [pc, #300]	; (8009028 <USBD_SetConfig+0x148>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d905      	bls.n	8008f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f96c 	bl	80091e0 <USBD_CtlError>
    return USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e088      	b.n	800901e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d002      	beq.n	8008f1e <USBD_SetConfig+0x3e>
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d025      	beq.n	8008f68 <USBD_SetConfig+0x88>
 8008f1c:	e071      	b.n	8009002 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f1e:	4b42      	ldr	r3, [pc, #264]	; (8009028 <USBD_SetConfig+0x148>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01c      	beq.n	8008f60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f26:	4b40      	ldr	r3, [pc, #256]	; (8009028 <USBD_SetConfig+0x148>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f30:	4b3d      	ldr	r3, [pc, #244]	; (8009028 <USBD_SetConfig+0x148>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff f992 	bl	8008260 <USBD_SetClassConfig>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f949 	bl	80091e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f4e:	e065      	b.n	800901c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fa10 	bl	8009376 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f5e:	e05d      	b.n	800901c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa08 	bl	8009376 <USBD_CtlSendStatus>
      break;
 8008f66:	e059      	b.n	800901c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f68:	4b2f      	ldr	r3, [pc, #188]	; (8009028 <USBD_SetConfig+0x148>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d112      	bne.n	8008f96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f78:	4b2b      	ldr	r3, [pc, #172]	; (8009028 <USBD_SetConfig+0x148>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f82:	4b29      	ldr	r3, [pc, #164]	; (8009028 <USBD_SetConfig+0x148>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff f985 	bl	8008298 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f9f1 	bl	8009376 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f94:	e042      	b.n	800901c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <USBD_SetConfig+0x148>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d02a      	beq.n	8008ffa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff f973 	bl	8008298 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	; (8009028 <USBD_SetConfig+0x148>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <USBD_SetConfig+0x148>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f94c 	bl	8008260 <USBD_SetClassConfig>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f903 	bl	80091e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff f958 	bl	8008298 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ff0:	e014      	b.n	800901c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9bf 	bl	8009376 <USBD_CtlSendStatus>
      break;
 8008ff8:	e010      	b.n	800901c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9bb 	bl	8009376 <USBD_CtlSendStatus>
      break;
 8009000:	e00c      	b.n	800901c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f8eb 	bl	80091e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <USBD_SetConfig+0x148>)
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff f941 	bl	8008298 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009016:	2303      	movs	r3, #3
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	bf00      	nop
  }

  return ret;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000334 	.word	0x20000334

0800902c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	88db      	ldrh	r3, [r3, #6]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d004      	beq.n	8009048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f8cd 	bl	80091e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009046:	e023      	b.n	8009090 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	dc02      	bgt.n	800905a <USBD_GetConfig+0x2e>
 8009054:	2b00      	cmp	r3, #0
 8009056:	dc03      	bgt.n	8009060 <USBD_GetConfig+0x34>
 8009058:	e015      	b.n	8009086 <USBD_GetConfig+0x5a>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d00b      	beq.n	8009076 <USBD_GetConfig+0x4a>
 800905e:	e012      	b.n	8009086 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3308      	adds	r3, #8
 800906a:	2201      	movs	r2, #1
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f927 	bl	80092c2 <USBD_CtlSendData>
        break;
 8009074:	e00c      	b.n	8009090 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3304      	adds	r3, #4
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f91f 	bl	80092c2 <USBD_CtlSendData>
        break;
 8009084:	e004      	b.n	8009090 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8a9 	bl	80091e0 <USBD_CtlError>
        break;
 800908e:	bf00      	nop
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d81e      	bhi.n	80090ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	88db      	ldrh	r3, [r3, #6]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d004      	beq.n	80090c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f890 	bl	80091e0 <USBD_CtlError>
        break;
 80090c0:	e01a      	b.n	80090f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f043 0202 	orr.w	r2, r3, #2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	330c      	adds	r3, #12
 80090e2:	2202      	movs	r2, #2
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f8eb 	bl	80092c2 <USBD_CtlSendData>
      break;
 80090ec:	e004      	b.n	80090f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f875 	bl	80091e0 <USBD_CtlError>
      break;
 80090f6:	bf00      	nop
  }
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f92b 	bl	8009376 <USBD_CtlSendStatus>
  }
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009138:	b2db      	uxtb	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	2b02      	cmp	r3, #2
 800913e:	d80b      	bhi.n	8009158 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	885b      	ldrh	r3, [r3, #2]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d10c      	bne.n	8009162 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f910 	bl	8009376 <USBD_CtlSendStatus>
      }
      break;
 8009156:	e004      	b.n	8009162 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f840 	bl	80091e0 <USBD_CtlError>
      break;
 8009160:	e000      	b.n	8009164 <USBD_ClrFeature+0x3c>
      break;
 8009162:	bf00      	nop
  }
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	781a      	ldrb	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3301      	adds	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fa92 	bl	80086c0 <SWAPBYTE>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3301      	adds	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff fa85 	bl	80086c0 <SWAPBYTE>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fa78 	bl	80086c0 <SWAPBYTE>
 80091d0:	4603      	mov	r3, r0
 80091d2:	461a      	mov	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	80da      	strh	r2, [r3, #6]
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ea:	2180      	movs	r1, #128	; 0x80
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fc6f 	bl	8009ad0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091f2:	2100      	movs	r1, #0
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fc6b 	bl	8009ad0 <USBD_LL_StallEP>
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d036      	beq.n	8009286 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800921c:	6938      	ldr	r0, [r7, #16]
 800921e:	f000 f836 	bl	800928e <USBD_GetLen>
 8009222:	4603      	mov	r3, r0
 8009224:	3301      	adds	r3, #1
 8009226:	b29b      	uxth	r3, r3
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4413      	add	r3, r2
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	7812      	ldrb	r2, [r2, #0]
 800923a:	701a      	strb	r2, [r3, #0]
  idx++;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	3301      	adds	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	4413      	add	r3, r2
 8009248:	2203      	movs	r2, #3
 800924a:	701a      	strb	r2, [r3, #0]
  idx++;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	3301      	adds	r3, #1
 8009250:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009252:	e013      	b.n	800927c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	7812      	ldrb	r2, [r2, #0]
 800925e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3301      	adds	r3, #1
 8009264:	613b      	str	r3, [r7, #16]
    idx++;
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	3301      	adds	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
    idx++;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	3301      	adds	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e7      	bne.n	8009254 <USBD_GetString+0x52>
 8009284:	e000      	b.n	8009288 <USBD_GetString+0x86>
    return;
 8009286:	bf00      	nop
  }
}
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800928e:	b480      	push	{r7}
 8009290:	b085      	sub	sp, #20
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800929e:	e005      	b.n	80092ac <USBD_GetLen+0x1e>
  {
    len++;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	3301      	adds	r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f5      	bne.n	80092a0 <USBD_GetLen+0x12>
  }

  return len;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fc7a 	bl	8009be2 <USBD_LL_Transmit>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fc69 	bl	8009be2 <USBD_LL_Transmit>

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2203      	movs	r2, #3
 800932a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	2100      	movs	r1, #0
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fc6d 	bl	8009c24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	2100      	movs	r1, #0
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 fc5c 	bl	8009c24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2204      	movs	r2, #4
 8009382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	2100      	movs	r1, #0
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fc28 	bl	8009be2 <USBD_LL_Transmit>

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2205      	movs	r2, #5
 80093a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093ac:	2300      	movs	r3, #0
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fc36 	bl	8009c24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80093c8:	2200      	movs	r2, #0
 80093ca:	4912      	ldr	r1, [pc, #72]	; (8009414 <MX_USB_Device_Init+0x50>)
 80093cc:	4812      	ldr	r0, [pc, #72]	; (8009418 <MX_USB_Device_Init+0x54>)
 80093ce:	f7fe fed9 	bl	8008184 <USBD_Init>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80093d8:	f7f7 fadf 	bl	800099a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80093dc:	490f      	ldr	r1, [pc, #60]	; (800941c <MX_USB_Device_Init+0x58>)
 80093de:	480e      	ldr	r0, [pc, #56]	; (8009418 <MX_USB_Device_Init+0x54>)
 80093e0:	f7fe ff00 	bl	80081e4 <USBD_RegisterClass>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80093ea:	f7f7 fad6 	bl	800099a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80093ee:	490c      	ldr	r1, [pc, #48]	; (8009420 <MX_USB_Device_Init+0x5c>)
 80093f0:	4809      	ldr	r0, [pc, #36]	; (8009418 <MX_USB_Device_Init+0x54>)
 80093f2:	f7fe fe51 	bl	8008098 <USBD_CDC_RegisterInterface>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80093fc:	f7f7 facd 	bl	800099a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <MX_USB_Device_Init+0x54>)
 8009402:	f7fe ff16 	bl	8008232 <USBD_Start>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800940c:	f7f7 fac5 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009410:	bf00      	nop
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20000130 	.word	0x20000130
 8009418:	20000338 	.word	0x20000338
 800941c:	20000018 	.word	0x20000018
 8009420:	2000011c 	.word	0x2000011c

08009424 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009428:	2200      	movs	r2, #0
 800942a:	4905      	ldr	r1, [pc, #20]	; (8009440 <CDC_Init_FS+0x1c>)
 800942c:	4805      	ldr	r0, [pc, #20]	; (8009444 <CDC_Init_FS+0x20>)
 800942e:	f7fe fe48 	bl	80080c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009432:	4905      	ldr	r1, [pc, #20]	; (8009448 <CDC_Init_FS+0x24>)
 8009434:	4803      	ldr	r0, [pc, #12]	; (8009444 <CDC_Init_FS+0x20>)
 8009436:	f7fe fe62 	bl	80080fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800943a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800943c:	4618      	mov	r0, r3
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20000e08 	.word	0x20000e08
 8009444:	20000338 	.word	0x20000338
 8009448:	20000608 	.word	0x20000608

0800944c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009450:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009452:	4618      	mov	r0, r3
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
 8009468:	4613      	mov	r3, r2
 800946a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	2b23      	cmp	r3, #35	; 0x23
 8009470:	d84a      	bhi.n	8009508 <CDC_Control_FS+0xac>
 8009472:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <CDC_Control_FS+0x1c>)
 8009474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009478:	08009509 	.word	0x08009509
 800947c:	08009509 	.word	0x08009509
 8009480:	08009509 	.word	0x08009509
 8009484:	08009509 	.word	0x08009509
 8009488:	08009509 	.word	0x08009509
 800948c:	08009509 	.word	0x08009509
 8009490:	08009509 	.word	0x08009509
 8009494:	08009509 	.word	0x08009509
 8009498:	08009509 	.word	0x08009509
 800949c:	08009509 	.word	0x08009509
 80094a0:	08009509 	.word	0x08009509
 80094a4:	08009509 	.word	0x08009509
 80094a8:	08009509 	.word	0x08009509
 80094ac:	08009509 	.word	0x08009509
 80094b0:	08009509 	.word	0x08009509
 80094b4:	08009509 	.word	0x08009509
 80094b8:	08009509 	.word	0x08009509
 80094bc:	08009509 	.word	0x08009509
 80094c0:	08009509 	.word	0x08009509
 80094c4:	08009509 	.word	0x08009509
 80094c8:	08009509 	.word	0x08009509
 80094cc:	08009509 	.word	0x08009509
 80094d0:	08009509 	.word	0x08009509
 80094d4:	08009509 	.word	0x08009509
 80094d8:	08009509 	.word	0x08009509
 80094dc:	08009509 	.word	0x08009509
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009509 	.word	0x08009509
 80094e8:	08009509 	.word	0x08009509
 80094ec:	08009509 	.word	0x08009509
 80094f0:	08009509 	.word	0x08009509
 80094f4:	08009509 	.word	0x08009509
 80094f8:	08009509 	.word	0x08009509
 80094fc:	08009509 	.word	0x08009509
 8009500:	08009509 	.word	0x08009509
 8009504:	08009509 	.word	0x08009509
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009508:	bf00      	nop
  }

  return (USBD_OK);
 800950a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	4805      	ldr	r0, [pc, #20]	; (800953c <CDC_Receive_FS+0x24>)
 8009526:	f7fe fdea 	bl	80080fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800952a:	4804      	ldr	r0, [pc, #16]	; (800953c <CDC_Receive_FS+0x24>)
 800952c:	f7fe fe00 	bl	8008130 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009530:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20000338 	.word	0x20000338

08009540 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009556:	4618      	mov	r0, r3
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2212      	movs	r2, #18
 8009574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009576:	4b03      	ldr	r3, [pc, #12]	; (8009584 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	20000150 	.word	0x20000150

08009588 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2204      	movs	r2, #4
 8009598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800959a:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000164 	.word	0x20000164

080095ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	6039      	str	r1, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4907      	ldr	r1, [pc, #28]	; (80095e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80095c2:	4808      	ldr	r0, [pc, #32]	; (80095e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80095c4:	f7ff fe1d 	bl	8009202 <USBD_GetString>
 80095c8:	e004      	b.n	80095d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4904      	ldr	r1, [pc, #16]	; (80095e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80095ce:	4805      	ldr	r0, [pc, #20]	; (80095e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80095d0:	f7ff fe17 	bl	8009202 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d4:	4b02      	ldr	r3, [pc, #8]	; (80095e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20001608 	.word	0x20001608
 80095e4:	08009dfc 	.word	0x08009dfc

080095e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	6039      	str	r1, [r7, #0]
 80095f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	4904      	ldr	r1, [pc, #16]	; (8009608 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80095f8:	4804      	ldr	r0, [pc, #16]	; (800960c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80095fa:	f7ff fe02 	bl	8009202 <USBD_GetString>
  return USBD_StrDesc;
 80095fe:	4b02      	ldr	r3, [pc, #8]	; (8009608 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	20001608 	.word	0x20001608
 800960c:	08009e08 	.word	0x08009e08

08009610 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	221a      	movs	r2, #26
 8009620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009622:	f000 f843 	bl	80096ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009626:	4b02      	ldr	r3, [pc, #8]	; (8009630 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20000168 	.word	0x20000168

08009634 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	6039      	str	r1, [r7, #0]
 800963e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d105      	bne.n	8009652 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	4907      	ldr	r1, [pc, #28]	; (8009668 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800964a:	4808      	ldr	r0, [pc, #32]	; (800966c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800964c:	f7ff fdd9 	bl	8009202 <USBD_GetString>
 8009650:	e004      	b.n	800965c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4904      	ldr	r1, [pc, #16]	; (8009668 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009656:	4805      	ldr	r0, [pc, #20]	; (800966c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009658:	f7ff fdd3 	bl	8009202 <USBD_GetString>
  }
  return USBD_StrDesc;
 800965c:	4b02      	ldr	r3, [pc, #8]	; (8009668 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20001608 	.word	0x20001608
 800966c:	08009e1c 	.word	0x08009e1c

08009670 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	6039      	str	r1, [r7, #0]
 800967a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d105      	bne.n	800968e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4907      	ldr	r1, [pc, #28]	; (80096a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009686:	4808      	ldr	r0, [pc, #32]	; (80096a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009688:	f7ff fdbb 	bl	8009202 <USBD_GetString>
 800968c:	e004      	b.n	8009698 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4904      	ldr	r1, [pc, #16]	; (80096a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009692:	4805      	ldr	r0, [pc, #20]	; (80096a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009694:	f7ff fdb5 	bl	8009202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009698:	4b02      	ldr	r3, [pc, #8]	; (80096a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20001608 	.word	0x20001608
 80096a8:	08009e28 	.word	0x08009e28

080096ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <Get_SerialNum+0x44>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096b8:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <Get_SerialNum+0x48>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096be:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <Get_SerialNum+0x4c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4413      	add	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d009      	beq.n	80096e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096d2:	2208      	movs	r2, #8
 80096d4:	4909      	ldr	r1, [pc, #36]	; (80096fc <Get_SerialNum+0x50>)
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 f814 	bl	8009704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096dc:	2204      	movs	r2, #4
 80096de:	4908      	ldr	r1, [pc, #32]	; (8009700 <Get_SerialNum+0x54>)
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f000 f80f 	bl	8009704 <IntToUnicode>
  }
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	1fff7590 	.word	0x1fff7590
 80096f4:	1fff7594 	.word	0x1fff7594
 80096f8:	1fff7598 	.word	0x1fff7598
 80096fc:	2000016a 	.word	0x2000016a
 8009700:	2000017a 	.word	0x2000017a

08009704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]
 800971a:	e027      	b.n	800976c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	0f1b      	lsrs	r3, r3, #28
 8009720:	2b09      	cmp	r3, #9
 8009722:	d80b      	bhi.n	800973c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	0f1b      	lsrs	r3, r3, #28
 8009728:	b2da      	uxtb	r2, r3
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	4619      	mov	r1, r3
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	440b      	add	r3, r1
 8009734:	3230      	adds	r2, #48	; 0x30
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e00a      	b.n	8009752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	0f1b      	lsrs	r3, r3, #28
 8009740:	b2da      	uxtb	r2, r3
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	4619      	mov	r1, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	440b      	add	r3, r1
 800974c:	3237      	adds	r2, #55	; 0x37
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	3301      	adds	r3, #1
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009766:	7dfb      	ldrb	r3, [r7, #23]
 8009768:	3301      	adds	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]
 800976c:	7dfa      	ldrb	r2, [r7, #23]
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	429a      	cmp	r2, r3
 8009772:	d3d3      	bcc.n	800971c <IntToUnicode+0x18>
  }
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	371c      	adds	r7, #28
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b098      	sub	sp, #96	; 0x60
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800978c:	f107 030c 	add.w	r3, r7, #12
 8009790:	2254      	movs	r2, #84	; 0x54
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fb1d 	bl	8009dd4 <memset>
  if(pcdHandle->Instance==USB)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a15      	ldr	r2, [pc, #84]	; (80097f4 <HAL_PCD_MspInit+0x70>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d122      	bne.n	80097ea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80097a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80097aa:	2300      	movs	r3, #0
 80097ac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80097ae:	f107 030c 	add.w	r3, r7, #12
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fa fdba 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80097be:	f7f7 f8ec 	bl	800099a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80097c2:	4b0d      	ldr	r3, [pc, #52]	; (80097f8 <HAL_PCD_MspInit+0x74>)
 80097c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c6:	4a0c      	ldr	r2, [pc, #48]	; (80097f8 <HAL_PCD_MspInit+0x74>)
 80097c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097cc:	6593      	str	r3, [r2, #88]	; 0x58
 80097ce:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <HAL_PCD_MspInit+0x74>)
 80097d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097d6:	60bb      	str	r3, [r7, #8]
 80097d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80097da:	2200      	movs	r2, #0
 80097dc:	2100      	movs	r1, #0
 80097de:	2014      	movs	r0, #20
 80097e0:	f7f7 fb65 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80097e4:	2014      	movs	r0, #20
 80097e6:	f7f7 fb7c 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097ea:	bf00      	nop
 80097ec:	3760      	adds	r7, #96	; 0x60
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40005c00 	.word	0x40005c00
 80097f8:	40021000 	.word	0x40021000

080097fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f7fe fd58 	bl	80082c8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	00db      	lsls	r3, r3, #3
 800983e:	440b      	add	r3, r1
 8009840:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	4619      	mov	r1, r3
 800984a:	f7fe fd92 	bl	8008372 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800984e:	bf00      	nop
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	460b      	mov	r3, r1
 8009860:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	440b      	add	r3, r1
 8009876:	3324      	adds	r3, #36	; 0x24
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	4619      	mov	r1, r3
 800987e:	f7fe fddb 	bl	8008438 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009898:	4618      	mov	r0, r3
 800989a:	f7fe feef 	bl	800867c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098ae:	2301      	movs	r3, #1
 80098b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	795b      	ldrb	r3, [r3, #5]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d001      	beq.n	80098be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098ba:	f7f7 f86e 	bl	800099a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80098c4:	7bfa      	ldrb	r2, [r7, #15]
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fe99 	bl	8008600 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe fe45 	bl	8008564 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fe94 	bl	8008620 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7a5b      	ldrb	r3, [r3, #9]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009900:	4b04      	ldr	r3, [pc, #16]	; (8009914 <HAL_PCD_SuspendCallback+0x30>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	4a03      	ldr	r2, [pc, #12]	; (8009914 <HAL_PCD_SuspendCallback+0x30>)
 8009906:	f043 0306 	orr.w	r3, r3, #6
 800990a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	e000ed00 	.word	0xe000ed00

08009918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7a5b      	ldrb	r3, [r3, #9]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d007      	beq.n	8009938 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009928:	4b08      	ldr	r3, [pc, #32]	; (800994c <HAL_PCD_ResumeCallback+0x34>)
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	4a07      	ldr	r2, [pc, #28]	; (800994c <HAL_PCD_ResumeCallback+0x34>)
 800992e:	f023 0306 	bic.w	r3, r3, #6
 8009932:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009934:	f000 f9f8 	bl	8009d28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fe84 	bl	800864c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	e000ed00 	.word	0xe000ed00

08009950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009958:	4a2b      	ldr	r2, [pc, #172]	; (8009a08 <USBD_LL_Init+0xb8>)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a29      	ldr	r2, [pc, #164]	; (8009a08 <USBD_LL_Init+0xb8>)
 8009964:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009968:	4b27      	ldr	r3, [pc, #156]	; (8009a08 <USBD_LL_Init+0xb8>)
 800996a:	4a28      	ldr	r2, [pc, #160]	; (8009a0c <USBD_LL_Init+0xbc>)
 800996c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800996e:	4b26      	ldr	r3, [pc, #152]	; (8009a08 <USBD_LL_Init+0xb8>)
 8009970:	2208      	movs	r2, #8
 8009972:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009974:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <USBD_LL_Init+0xb8>)
 8009976:	2202      	movs	r2, #2
 8009978:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800997a:	4b23      	ldr	r3, [pc, #140]	; (8009a08 <USBD_LL_Init+0xb8>)
 800997c:	2202      	movs	r2, #2
 800997e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009980:	4b21      	ldr	r3, [pc, #132]	; (8009a08 <USBD_LL_Init+0xb8>)
 8009982:	2200      	movs	r2, #0
 8009984:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009986:	4b20      	ldr	r3, [pc, #128]	; (8009a08 <USBD_LL_Init+0xb8>)
 8009988:	2200      	movs	r2, #0
 800998a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800998c:	4b1e      	ldr	r3, [pc, #120]	; (8009a08 <USBD_LL_Init+0xb8>)
 800998e:	2200      	movs	r2, #0
 8009990:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009992:	4b1d      	ldr	r3, [pc, #116]	; (8009a08 <USBD_LL_Init+0xb8>)
 8009994:	2200      	movs	r2, #0
 8009996:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009998:	481b      	ldr	r0, [pc, #108]	; (8009a08 <USBD_LL_Init+0xb8>)
 800999a:	f7f8 f9b1 	bl	8001d00 <HAL_PCD_Init>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80099a4:	f7f6 fff9 	bl	800099a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099ae:	2318      	movs	r3, #24
 80099b0:	2200      	movs	r2, #0
 80099b2:	2100      	movs	r1, #0
 80099b4:	f7f9 fe6b 	bl	800368e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099be:	2358      	movs	r3, #88	; 0x58
 80099c0:	2200      	movs	r2, #0
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	f7f9 fe63 	bl	800368e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099ce:	23c0      	movs	r3, #192	; 0xc0
 80099d0:	2200      	movs	r2, #0
 80099d2:	2181      	movs	r1, #129	; 0x81
 80099d4:	f7f9 fe5b 	bl	800368e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80099e2:	2200      	movs	r2, #0
 80099e4:	2101      	movs	r1, #1
 80099e6:	f7f9 fe52 	bl	800368e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f4:	2200      	movs	r2, #0
 80099f6:	2182      	movs	r1, #130	; 0x82
 80099f8:	f7f9 fe49 	bl	800368e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20001808 	.word	0x20001808
 8009a0c:	40005c00 	.word	0x40005c00

08009a10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7f8 fa38 	bl	8001e9c <HAL_PCD_Start>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f97e 	bl	8009d34 <USBD_Get_USB_Status>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	4608      	mov	r0, r1
 8009a50:	4611      	mov	r1, r2
 8009a52:	461a      	mov	r2, r3
 8009a54:	4603      	mov	r3, r0
 8009a56:	70fb      	strb	r3, [r7, #3]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70bb      	strb	r3, [r7, #2]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a6e:	78bb      	ldrb	r3, [r7, #2]
 8009a70:	883a      	ldrh	r2, [r7, #0]
 8009a72:	78f9      	ldrb	r1, [r7, #3]
 8009a74:	f7f8 fb7f 	bl	8002176 <HAL_PCD_EP_Open>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f958 	bl	8009d34 <USBD_Get_USB_Status>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7f8 fbbd 	bl	8002230 <HAL_PCD_EP_Close>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f939 	bl	8009d34 <USBD_Get_USB_Status>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aea:	78fa      	ldrb	r2, [r7, #3]
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f8 fc66 	bl	80023c0 <HAL_PCD_EP_SetStall>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 f91a 	bl	8009d34 <USBD_Get_USB_Status>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b28:	78fa      	ldrb	r2, [r7, #3]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7f8 fc99 	bl	8002464 <HAL_PCD_EP_ClrStall>
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f8fb 	bl	8009d34 <USBD_Get_USB_Status>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	da0b      	bge.n	8009b80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b68:	78fb      	ldrb	r3, [r7, #3]
 8009b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b6e:	68f9      	ldr	r1, [r7, #12]
 8009b70:	4613      	mov	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	440b      	add	r3, r1
 8009b7a:	3312      	adds	r3, #18
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	e00b      	b.n	8009b98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b86:	68f9      	ldr	r1, [r7, #12]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	440b      	add	r3, r1
 8009b92:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009b96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bbe:	78fa      	ldrb	r2, [r7, #3]
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7f8 fab3 	bl	800212e <HAL_PCD_SetAddress>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f8b0 	bl	8009d34 <USBD_Get_USB_Status>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b086      	sub	sp, #24
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c00:	7af9      	ldrb	r1, [r7, #11]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	f7f8 fba4 	bl	8002352 <HAL_PCD_EP_Transmit>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f88f 	bl	8009d34 <USBD_Get_USB_Status>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	460b      	mov	r3, r1
 8009c32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c42:	7af9      	ldrb	r1, [r7, #11]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	f7f8 fb3a 	bl	80022c0 <HAL_PCD_EP_Receive>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f86e 	bl	8009d34 <USBD_Get_USB_Status>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b082      	sub	sp, #8
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c78:	78fa      	ldrb	r2, [r7, #3]
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7f8 fb50 	bl	8002322 <HAL_PCD_EP_GetRxCount>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <HAL_PCDEx_LPM_Callback+0x18>
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d013      	beq.n	8009cca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009ca2:	e023      	b.n	8009cec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7a5b      	ldrb	r3, [r3, #9]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d007      	beq.n	8009cbc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009cac:	f000 f83c 	bl	8009d28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cb0:	4b10      	ldr	r3, [pc, #64]	; (8009cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	4a0f      	ldr	r2, [pc, #60]	; (8009cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009cb6:	f023 0306 	bic.w	r3, r3, #6
 8009cba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fcc2 	bl	800864c <USBD_LL_Resume>
    break;
 8009cc8:	e010      	b.n	8009cec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fe fca5 	bl	8008620 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7a5b      	ldrb	r3, [r3, #9]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	4a04      	ldr	r2, [pc, #16]	; (8009cf4 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ce4:	f043 0306 	orr.w	r3, r3, #6
 8009ce8:	6113      	str	r3, [r2, #16]
    break;
 8009cea:	bf00      	nop
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	e000ed00 	.word	0xe000ed00

08009cf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d00:	4b03      	ldr	r3, [pc, #12]	; (8009d10 <USBD_static_malloc+0x18>)
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	20001ae4 	.word	0x20001ae4

08009d14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009d2c:	f7f6 fde8 	bl	8000900 <SystemClock_Config>
}
 8009d30:	bf00      	nop
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d817      	bhi.n	8009d78 <USBD_Get_USB_Status+0x44>
 8009d48:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <USBD_Get_USB_Status+0x1c>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009d61 	.word	0x08009d61
 8009d54:	08009d67 	.word	0x08009d67
 8009d58:	08009d6d 	.word	0x08009d6d
 8009d5c:	08009d73 	.word	0x08009d73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73fb      	strb	r3, [r7, #15]
    break;
 8009d64:	e00b      	b.n	8009d7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d66:	2303      	movs	r3, #3
 8009d68:	73fb      	strb	r3, [r7, #15]
    break;
 8009d6a:	e008      	b.n	8009d7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d70:	e005      	b.n	8009d7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d72:	2303      	movs	r3, #3
 8009d74:	73fb      	strb	r3, [r7, #15]
    break;
 8009d76:	e002      	b.n	8009d7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d7c:	bf00      	nop
  }
  return usb_status;
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <__libc_init_array>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4d0d      	ldr	r5, [pc, #52]	; (8009dc4 <__libc_init_array+0x38>)
 8009d90:	4c0d      	ldr	r4, [pc, #52]	; (8009dc8 <__libc_init_array+0x3c>)
 8009d92:	1b64      	subs	r4, r4, r5
 8009d94:	10a4      	asrs	r4, r4, #2
 8009d96:	2600      	movs	r6, #0
 8009d98:	42a6      	cmp	r6, r4
 8009d9a:	d109      	bne.n	8009db0 <__libc_init_array+0x24>
 8009d9c:	4d0b      	ldr	r5, [pc, #44]	; (8009dcc <__libc_init_array+0x40>)
 8009d9e:	4c0c      	ldr	r4, [pc, #48]	; (8009dd0 <__libc_init_array+0x44>)
 8009da0:	f000 f820 	bl	8009de4 <_init>
 8009da4:	1b64      	subs	r4, r4, r5
 8009da6:	10a4      	asrs	r4, r4, #2
 8009da8:	2600      	movs	r6, #0
 8009daa:	42a6      	cmp	r6, r4
 8009dac:	d105      	bne.n	8009dba <__libc_init_array+0x2e>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db4:	4798      	blx	r3
 8009db6:	3601      	adds	r6, #1
 8009db8:	e7ee      	b.n	8009d98 <__libc_init_array+0xc>
 8009dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dbe:	4798      	blx	r3
 8009dc0:	3601      	adds	r6, #1
 8009dc2:	e7f2      	b.n	8009daa <__libc_init_array+0x1e>
 8009dc4:	08009e80 	.word	0x08009e80
 8009dc8:	08009e80 	.word	0x08009e80
 8009dcc:	08009e80 	.word	0x08009e80
 8009dd0:	08009e84 	.word	0x08009e84

08009dd4 <memset>:
 8009dd4:	4402      	add	r2, r0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d100      	bne.n	8009dde <memset+0xa>
 8009ddc:	4770      	bx	lr
 8009dde:	f803 1b01 	strb.w	r1, [r3], #1
 8009de2:	e7f9      	b.n	8009dd8 <memset+0x4>

08009de4 <_init>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	bf00      	nop
 8009de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dea:	bc08      	pop	{r3}
 8009dec:	469e      	mov	lr, r3
 8009dee:	4770      	bx	lr

08009df0 <_fini>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr
